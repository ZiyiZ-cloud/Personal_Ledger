{"ast":null,"code":"var _jsxFileName = \"/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/common/MonthlyPieChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Pie, Bar } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PieChart(_ref) {\n  _s();\n\n  let {\n    username,\n    year,\n    month,\n    chartTitle\n  } = _ref;\n  const [categoryIncome, setCategoryIncome] = useState(null);\n  const [categoryExpense, setCategoryExpense] = useState(null);\n\n  async function getCategoryData(username, year, month) {\n    setCategoryIncome(await LedgerApi.getMonthlyCategoryIncome(username, year, month));\n    setCategoryExpense(await LedgerApi.getMonthlyCategoryExpense(username, year, month));\n  }\n\n  useEffect(function getcategoryData() {\n    getCategoryData(username, year, month);\n    console.log(categoryExpense, categoryIncome);\n  }, []);\n  if (!categoryExpense) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 33\n  }, this);\n  if (!categoryIncome) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 32\n  }, this);\n  let expensedata = {\n    labels: categoryExpense.categoryExpense.map(x => x[0]),\n    datasets: [{\n      id: 1,\n      label: 'Expnese',\n      data: categoryExpense.categoryExpense.map(x => x[1]),\n      borderColor: '',\n      backgroundColor: 'blue'\n    }, {\n      id: 2,\n      label: 'Income',\n      data: categoryIncome.categoryIncome.map(x => x[1]),\n      borderColor: \"\",\n      backgroundColor: 'red' //  [\"#0000ff\", \"#0000e5\",\n      //     \"#0000cc\",\n      //     \"#0000b2\",\n      //     \"#000099\",\n      //     \"#00007f\",\n      //     \"#000066\",\n      //     \"#00004c\",\n      //     \"#000033\",\n      //     \"#000019\",\n      //     \"#1919ff\",\n      //     \"#3232ff\",\n      //     \"#4c4cff\",\n      //     \"#6666ff\",\n      //     \"#7f7fff\",\n      //     \"#9999ff\",\n      //     \"#b2b2ff\",\n      //     \"#ccccff\",\n      //     \"#e5e5ff\",\n      //     ],\n\n    }]\n  };\n  let incomedata = {\n    labels: categoryIncome.categoryIncome.map(x => x[0]),\n    datasets: [{\n      id: 1,\n      label: 'Expnese',\n      data: categoryIncome.categoryIncome.map(x => x[1]),\n      borderColor: \"\",\n      backgroundColor: [\"#0000ff\", \"#0000e5\", \"#0000cc\", \"#0000b2\", \"#000099\", \"#00007f\", \"#000066\", \"#00004c\", \"#000033\", \"#000019\", \"#1919ff\", \"#3232ff\", \"#4c4cff\", \"#6666ff\", \"#7f7fff\", \"#9999ff\", \"#b2b2ff\", \"#ccccff\", \"#e5e5ff\"]\n    }]\n  };\n  let expenseTitle = `${year} - ${month} Expense`;\n  let incomeTitle = `${year} - ${month} Income`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [chartTitle, /*#__PURE__*/_jsxDEV(Bar, {\n      style: {\n        canvasHeight: \"500px\",\n        canvasWidth: \"500px\"\n      },\n      datasetIdKey: \"id\",\n      data: expensedata,\n      options: {\n        plugins: {//     responsive: true,\n          //     legend: {\n          //         color: 'black',                \n          //         position: 'left',\n          //         labels: {\n          //                 generateLabels: (chart) => {\n          //                     const datasets = chart.data.datasets;\n          //                     return datasets[0].data.map((data, i) => ({\n          //                     text: `${chart.data.labels[i]} ${data}`,\n          //                     fillStyle: datasets[0].backgroundColor[i],\n          //                     }))\n          //         },\n          //     } ,\n          // }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PieChart, \"Y2BBhGhlU2q+Dk78n5mt/YpTL1k=\");\n\n_c = PieChart;\nexport default PieChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"names":["React","Component","useEffect","useState","LedgerApi","LoadingSpinner","Pie","Bar","Chart","Avatar","Box","Grid","Menu","MenuItem","Typography","PieChart","username","year","month","chartTitle","categoryIncome","setCategoryIncome","categoryExpense","setCategoryExpense","getCategoryData","getMonthlyCategoryIncome","getMonthlyCategoryExpense","getcategoryData","console","log","expensedata","labels","map","x","datasets","id","label","data","borderColor","backgroundColor","incomedata","expenseTitle","incomeTitle","canvasHeight","canvasWidth","plugins"],"sources":["/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/common/MonthlyPieChart.js"],"sourcesContent":["import React, { Component,useEffect,useState } from 'react'\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Pie ,Bar} from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from '@mui/material';\n\n\n\nfunction PieChart({username,year,month,chartTitle}) {\n\n  const [categoryIncome,setCategoryIncome] = useState(null);\n  const [categoryExpense,setCategoryExpense] = useState(null);\n\n  async function getCategoryData(username,year,month){\n    setCategoryIncome(await LedgerApi.getMonthlyCategoryIncome(username,year,month));\n    setCategoryExpense( await LedgerApi.getMonthlyCategoryExpense(username,year,month));\n  }\n\n    useEffect(function getcategoryData(){\n      getCategoryData(username,year,month);\n      console.log(categoryExpense,categoryIncome);\n    },[])\n\n    if(!categoryExpense) return <LoadingSpinner />;\n    if(!categoryIncome) return <LoadingSpinner />;\n\n    let expensedata = {\n      labels: categoryExpense.categoryExpense.map(x=>x[0]),\n      datasets: [\n        {\n          id: 1,\n          label: 'Expnese',\n          data: categoryExpense.categoryExpense.map(x=>x[1]),\n          borderColor: '',\n          backgroundColor: 'blue',\n        },\n        {\n            id: 2,\n            label: 'Income',\n            data: categoryIncome.categoryIncome.map(x=>x[1]),\n            borderColor: \"\",\n            backgroundColor:'red',\n            //  [\"#0000ff\", \"#0000e5\",\n            //     \"#0000cc\",\n            //     \"#0000b2\",\n            //     \"#000099\",\n            //     \"#00007f\",\n            //     \"#000066\",\n            //     \"#00004c\",\n            //     \"#000033\",\n            //     \"#000019\",\n            //     \"#1919ff\",\n            //     \"#3232ff\",\n            //     \"#4c4cff\",\n            //     \"#6666ff\",\n            //     \"#7f7fff\",\n            //     \"#9999ff\",\n            //     \"#b2b2ff\",\n            //     \"#ccccff\",\n            //     \"#e5e5ff\",\n            //     ],\n          },\n      ],\n    }\n\n    let incomedata = {\n        labels: categoryIncome.categoryIncome.map(x=>x[0]),\n        datasets: [\n          {\n            id: 1,\n            label: 'Expnese',\n            data: categoryIncome.categoryIncome.map(x=>x[1]),\n            borderColor: \"\",\n            backgroundColor: \n            [\"#0000ff\", \"#0000e5\",\n                \"#0000cc\",\n                \"#0000b2\",\n                \"#000099\",\n                \"#00007f\",\n                \"#000066\",\n                \"#00004c\",\n                \"#000033\",\n                \"#000019\",\n                \"#1919ff\",\n                \"#3232ff\",\n                \"#4c4cff\",\n                \"#6666ff\",\n                \"#7f7fff\",\n                \"#9999ff\",\n                \"#b2b2ff\",\n                \"#ccccff\",\n                \"#e5e5ff\",\n                ],\n          },\n        ],\n      }\n\n      let expenseTitle = `${year} - ${month} Expense`;\n      let incomeTitle = `${year} - ${month} Income`;\n\n    return (\n      <div className=\"container mt-5\">\n      {/* <Grid container rowSpacing={1}>\n      <Grid item xs={6}>\n        <h2 >{expenseTitle}</h2>\n        <div style={{height:\"500px\", width:\"500px\"}}>\n        <Bar\n            style={{\n                canvasHeight:\"500px\",\n                canvasWidth:\"500px\",\n            }}\n          datasetIdKey='id'\n          data={expensedata} \n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'left',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}/>\n        </div></Grid>\n        <Grid item xs={6}>\n        <h2>{incomeTitle}</h2>\n        <div style={{height:\"500px\", width:\"500px\"}}>\n        <Bar\n          datasetIdKey='id'\n          data={incomedata }\n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'right',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}\n        /></div></Grid></Grid> */}\n        {chartTitle}\n        <Bar\n            style={{\n                canvasHeight:\"500px\",\n                canvasWidth:\"500px\",\n            }}\n          datasetIdKey='id'\n          data={expensedata} \n          options={ {\n            plugins: {\n            //     responsive: true,\n            //     legend: {\n            //         color: 'black',                \n            //         position: 'left',\n            //         labels: {\n            //                 generateLabels: (chart) => {\n            //                     const datasets = chart.data.datasets;\n            //                     return datasets[0].data.map((data, i) => ({\n            //                     text: `${chart.data.labels[i]} ${data}`,\n            //                     fillStyle: datasets[0].backgroundColor[i],\n            //                     }))\n            //         },\n            //     } ,\n            // }\n        }}}/>\n                {/* <Bar\n          datasetIdKey='id'\n          data={incomedata }\n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'right',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}\n        /> */}\n      </div>\n    )\n}\n\nexport default PieChart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}