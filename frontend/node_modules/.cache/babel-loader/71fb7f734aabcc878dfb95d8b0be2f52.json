{"ast":null,"code":"var _jsxFileName = \"/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport jwt from \"jwt-decode\";\nimport LedgerApi from './Api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"ledger-token\";\n\nfunction App() {\n  _s();\n\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token); // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt(token); // put the token on the Api class so it can use it to call the API.\n\n          LedgerApi.token = token;\n          let currentUser = await LedgerApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n\n      setInfoLoaded(true);\n    } // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n  /** Handles site-wide logout. */\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  } // if (!infoLoaded) return <LoadingSpinner />;\n\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"Ng9XeEGleJG0v7XKSnyO4s4IuTM=\", true);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BrowserRouter","React","useState","useEffect","jwt","LedgerApi","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currentUser","setCurrentUser","token","setToken","useLocalStorage","console","debug","loadUserInfo","getCurrentUser","username","applications","err","error","logout"],"sources":["/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/App.js"],"sourcesContent":["import './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport jwt from \"jwt-decode\";\nimport LedgerApi from './Api/api';\n\nexport const TOKEN_STORAGE_ID = \"ledger-token\";\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt(token);\n          // put the token on the Api class so it can use it to call the API.\n          LedgerApi.token = token;\n          let currentUser = await LedgerApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n\n  // if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser }}>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,cAAzB;;AAEP,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,IAAIU,GAAJ,CAAQ,EAAR,CAAD,CAApD;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,IAAD,CAA9C;EACA,MAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBC,eAAe,CAACX,gBAAD,CAAzC;EAEAY,OAAO,CAACC,KAAR,CACI,KADJ,EAEI,aAFJ,EAEmBX,UAFnB,EAGI,cAHJ,EAGoBK,WAHpB,EAII,QAJJ,EAIcE,KAJd,EANa,CAab;EACA;EACA;;EAEAZ,SAAS,CAAC,SAASiB,YAAT,GAAwB;IAChCF,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4C,QAA5C,EAAsDJ,KAAtD;;IAEA,eAAeM,cAAf,GAAgC;MAC9B,IAAIN,KAAJ,EAAW;QACT,IAAI;UACF,IAAI;YAAEO;UAAF,IAAelB,GAAG,CAACW,KAAD,CAAtB,CADE,CAEF;;UACAV,SAAS,CAACU,KAAV,GAAkBA,KAAlB;UACA,IAAIF,WAAW,GAAG,MAAMR,SAAS,CAACgB,cAAV,CAAyBC,QAAzB,CAAxB;UACAR,cAAc,CAACD,WAAD,CAAd;UACAF,iBAAiB,CAAC,IAAIC,GAAJ,CAAQC,WAAW,CAACU,YAApB,CAAD,CAAjB;QACD,CAPD,CAOE,OAAOC,GAAP,EAAY;UACZN,OAAO,CAACO,KAAR,CAAc,mCAAd,EAAmDD,GAAnD;UACAV,cAAc,CAAC,IAAD,CAAd;QACD;MACF;;MACDL,aAAa,CAAC,IAAD,CAAb;IACD,CAlB+B,CAoBhC;IACA;IACA;;;IACAA,aAAa,CAAC,KAAD,CAAb;IACAY,cAAc;EACf,CAzBQ,EAyBN,CAACN,KAAD,CAzBM,CAAT;EA2BA;;EACA,SAASW,MAAT,GAAkB;IAChBZ,cAAc,CAAC,IAAD,CAAd;IACAE,QAAQ,CAAC,IAAD,CAAR;EACD,CAhDY,CAmDb;;;EAEA,oBACI,QAAC,aAAD;IAAA,uBACE,QAAC,WAAD,CAAa,QAAb;MACI,KAAK,EAAE;QAAEH,WAAF;QAAeC;MAAf;IADX;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADJ;AAOD;;GA5DQP,G;;KAAAA,G;AA8DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}