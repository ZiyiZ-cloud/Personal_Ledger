{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass LedgerApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${LedgerApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n  //get current user\n\n\n  static async getUsers() {\n    let res = await this.request(``);\n    return res.users;\n  } // get current user information\n\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`${username}`);\n    return res;\n  } //update current user information\n\n\n  static async updateCurrentUser(username, data) {\n    let res = await this.request(`${username}`, data, \"patch\");\n    return res;\n  } //add new expense\n\n\n  static async addExpense(username, data) {\n    let res = await this.request(`${username}`, data, \"post\");\n    return {\n      success: true\n    };\n  } // get current user expenses\n\n\n  static async getCurrentExpenses(username) {\n    let res = await this.request(`expenses/${username}`);\n    return res;\n  } //get expenses based on category\n\n\n  static async getByCategory(username, category) {\n    let res = await this.request(`epenses/${username}/category/${category}`);\n    return res;\n  } //get expenses based on year\n\n\n  static async getByYear(username, year) {\n    let res = await this.request(`expenses/${username}/year/${year}`);\n    return res;\n  } //get expenses based on month of the year\n\n\n  static async getByMonth(username, year, month) {\n    let res = await this.request(`expenses/${username}/year/${year}/month/${month}`);\n    return res;\n  } //update expense\n\n\n  static async updateExpense(username, id, data) {\n    let res = await this.request(`expenses/${username}/${id}`, data, \"patch\");\n    return res;\n  } //delete expense\n\n\n  static async deleteExpense(username, id) {\n    let res = await this.request(`expenses/${username}/${id}`, \"delete\");\n    return res;\n  } // get token for login from username, password\n\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n  /** Signup for site. */\n\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n}\n\nexport default LedgerApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","LedgerApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getUsers","res","users","getCurrentUser","username","updateCurrentUser","addExpense","success","getCurrentExpenses","getByCategory","category","getByYear","year","getByMonth","month","updateExpense","id","deleteExpense","login","signup"],"sources":["/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/Api/api.js"],"sourcesContent":["import axios from \"axios\";\n\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass LedgerApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") { \n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${LedgerApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n \n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  //get current user\n\n  static async getUsers(){\n      let res = await this.request(``);\n      return res.users;\n  }\n\n  // get current user information\n\n  static async getCurrentUser(username){\n      let res = await this.request(`${username}`);\n      return res\n  }\n\n  //update current user information\n\n  static async updateCurrentUser(username,data){\n      let res = await this.request(`${username}`,data,\"patch\");\n      return res\n  }\n\n  //add new expense\n\n  static async addExpense(username,data){\n      let res = await this.request(`${username}`,data,\"post\");\n      return {success: true};\n  }\n\n  // get current user expenses\n\n  static async getCurrentExpenses(username){\n      let res = await this.request(`expenses/${username}`)\n      return res\n  }\n\n  //get expenses based on category\n\n  static async getByCategory(username,category){\n      let res = await this.request(`epenses/${username}/category/${category}`)\n      return res\n  }\n\n  //get expenses based on year\n\n  static async getByYear(username,year){\n      let res = await this.request(`expenses/${username}/year/${year}`)\n      return res\n  }\n\n  //get expenses based on month of the year\n\n  static async getByMonth(username,year,month){\n    let res = await this.request(`expenses/${username}/year/${year}/month/${month}`)\n    return res\n  }\n\n  //update expense\n\n  static async updateExpense(username,id,data){\n      let res = await this.request(`expenses/${username}/${id}`,data,\"patch\")\n      return res\n  }\n\n  //delete expense\n\n  static async deleteExpense(username,id){\n      let res = await this.request(`expenses/${username}/${id}`,\"delete\")\n      return res\n  }\n\n\n  // get token for login from username, password\n\n  static async login(data){\n      let res = await this.request(`auth/token`,data,\"post\");\n      return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n  \n\n}\n\n\nexport default LedgerApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}