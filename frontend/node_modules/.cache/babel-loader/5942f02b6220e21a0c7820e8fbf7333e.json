{"ast":null,"code":"import _asyncToGenerator from\"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect,useState}from'react';import LedgerApi from'../Api/api';import LoadingSpinner from'./LoadingSpinner';import{Bar}from'react-chartjs-2';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function PieChart(_ref){var username=_ref.username,year=_ref.year,month=_ref.month,chartTitle=_ref.chartTitle;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),categoryIncome=_useState2[0],setCategoryIncome=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),categoryExpense=_useState4[0],setCategoryExpense=_useState4[1];function getCategoryData(_x,_x2,_x3){return _getCategoryData.apply(this,arguments);}function _getCategoryData(){_getCategoryData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(username,year,month){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setCategoryIncome;_context.next=3;return LedgerApi.getMonthlyCategoryIncome(username,year,month);case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);_context.t2=setCategoryExpense;_context.next=8;return LedgerApi.getMonthlyCategoryExpense(username,year,month);case 8:_context.t3=_context.sent;(0,_context.t2)(_context.t3);case 10:case\"end\":return _context.stop();}}},_callee);}));return _getCategoryData.apply(this,arguments);}useEffect(function getcategoryData(){getCategoryData(username,year,month);console.log(categoryExpense,categoryIncome);},[]);if(!categoryExpense)return/*#__PURE__*/_jsx(LoadingSpinner,{});if(!categoryIncome)return/*#__PURE__*/_jsx(LoadingSpinner,{});var expensedata={labels:categoryExpense.categoryExpense.map(function(x){return x[0];}),datasets:[{id:1,label:'Expnese',data:categoryExpense.categoryExpense.map(function(x){return x[1];}),borderColor:'',backgroundColor:'orange'},{id:2,label:'Income',data:categoryIncome.categoryIncome.map(function(x){return x[1];}),borderColor:\"\",backgroundColor:'#8a2be2'//  [\"#0000ff\", \"#0000e5\",\n//     \"#0000cc\",\n//     \"#0000b2\",\n//     \"#000099\",\n//     \"#00007f\",\n//     \"#000066\",\n//     \"#00004c\",\n//     \"#000033\",\n//     \"#000019\",\n//     \"#1919ff\",\n//     \"#3232ff\",\n//     \"#4c4cff\",\n//     \"#6666ff\",\n//     \"#7f7fff\",\n//     \"#9999ff\",\n//     \"#b2b2ff\",\n//     \"#ccccff\",\n//     \"#e5e5ff\",\n//     ],\n}]};return/*#__PURE__*/_jsxs(\"div\",{className:\"container mt-5\",children:[chartTitle,/*#__PURE__*/_jsx(Bar,{style:{canvasHeight:\"500px\",canvasWidth:\"500px\"},datasetIdKey:\"id\",data:expensedata,options:{plugins:{//     responsive: true,\n//     legend: {\n//         color: 'black',                \n//         position: 'left',\n//         labels: {\n//                 generateLabels: (chart) => {\n//                     const datasets = chart.data.datasets;\n//                     return datasets[0].data.map((data, i) => ({\n//                     text: `${chart.data.labels[i]} ${data}`,\n//                     fillStyle: datasets[0].backgroundColor[i],\n//                     }))\n//         },\n//     } ,\n// }\n}}})]});}export default PieChart;","map":{"version":3,"names":["React","useEffect","useState","LedgerApi","LoadingSpinner","Bar","PieChart","username","year","month","chartTitle","categoryIncome","setCategoryIncome","categoryExpense","setCategoryExpense","getCategoryData","getMonthlyCategoryIncome","getMonthlyCategoryExpense","getcategoryData","console","log","expensedata","labels","map","x","datasets","id","label","data","borderColor","backgroundColor","canvasHeight","canvasWidth","plugins"],"sources":["/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Monthly.js"],"sourcesContent":["import React, { useEffect,useState } from 'react'\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Bar} from 'react-chartjs-2';\n\n\n\nfunction PieChart({username,year,month,chartTitle}) {\n\n  const [categoryIncome,setCategoryIncome] = useState(null);\n  const [categoryExpense,setCategoryExpense] = useState(null);\n\n  async function getCategoryData(username,year,month){\n    setCategoryIncome(await LedgerApi.getMonthlyCategoryIncome(username,year,month));\n    setCategoryExpense( await LedgerApi.getMonthlyCategoryExpense(username,year,month));\n  }\n\n    useEffect(function getcategoryData(){\n      getCategoryData(username,year,month);\n      console.log(categoryExpense,categoryIncome);\n    },[])\n\n    if(!categoryExpense) return <LoadingSpinner />;\n    if(!categoryIncome) return <LoadingSpinner />;\n\n    let expensedata = {\n      labels: categoryExpense.categoryExpense.map(x=>x[0]),\n      datasets: [\n        {\n          id: 1,\n          label: 'Expnese',\n          data: categoryExpense.categoryExpense.map(x=>x[1]),\n          borderColor: '',\n          backgroundColor: 'orange',\n        },\n        {\n            id: 2,\n            label: 'Income',\n            data: categoryIncome.categoryIncome.map(x=>x[1]),\n            borderColor: \"\",\n            backgroundColor:'#8a2be2',\n            //  [\"#0000ff\", \"#0000e5\",\n            //     \"#0000cc\",\n            //     \"#0000b2\",\n            //     \"#000099\",\n            //     \"#00007f\",\n            //     \"#000066\",\n            //     \"#00004c\",\n            //     \"#000033\",\n            //     \"#000019\",\n            //     \"#1919ff\",\n            //     \"#3232ff\",\n            //     \"#4c4cff\",\n            //     \"#6666ff\",\n            //     \"#7f7fff\",\n            //     \"#9999ff\",\n            //     \"#b2b2ff\",\n            //     \"#ccccff\",\n            //     \"#e5e5ff\",\n            //     ],\n          },\n      ],\n    }\n\n\n    return (\n      <div className=\"container mt-5\">\n      {/* <Grid container rowSpacing={1}>\n      <Grid item xs={6}>\n        <h2 >{expenseTitle}</h2>\n        <div style={{height:\"500px\", width:\"500px\"}}>\n        <Bar\n            style={{\n                canvasHeight:\"500px\",\n                canvasWidth:\"500px\",\n            }}\n          datasetIdKey='id'\n          data={expensedata} \n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'left',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}/>\n        </div></Grid>\n        <Grid item xs={6}>\n        <h2>{incomeTitle}</h2>\n        <div style={{height:\"500px\", width:\"500px\"}}>\n        <Bar\n          datasetIdKey='id'\n          data={incomedata }\n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'right',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}\n        /></div></Grid></Grid> */}\n        {chartTitle}\n        <Bar\n            style={{\n                canvasHeight:\"500px\",\n                canvasWidth:\"500px\",\n            }}\n          datasetIdKey='id'\n          data={expensedata} \n          options={ {\n            plugins: {\n            //     responsive: true,\n            //     legend: {\n            //         color: 'black',                \n            //         position: 'left',\n            //         labels: {\n            //                 generateLabels: (chart) => {\n            //                     const datasets = chart.data.datasets;\n            //                     return datasets[0].data.map((data, i) => ({\n            //                     text: `${chart.data.labels[i]} ${data}`,\n            //                     fillStyle: datasets[0].backgroundColor[i],\n            //                     }))\n            //         },\n            //     } ,\n            // }\n        }}}/>\n                {/* <Bar\n          datasetIdKey='id'\n          data={incomedata }\n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'right',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}\n        /> */}\n      </div>\n    )\n}\n\nexport default PieChart;"],"mappings":"idAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA0BC,QAA1B,KAA0C,OAA1C,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,OAASC,GAAT,KAAmB,iBAAnB,C,wFAIA,QAASC,CAAAA,QAAT,MAAoD,IAAjCC,CAAAA,QAAiC,MAAjCA,QAAiC,CAAxBC,IAAwB,MAAxBA,IAAwB,CAAnBC,KAAmB,MAAnBA,KAAmB,CAAbC,UAAa,MAAbA,UAAa,CAElD,cAA2CR,QAAQ,CAAC,IAAD,CAAnD,wCAAOS,cAAP,eAAsBC,iBAAtB,eACA,eAA6CV,QAAQ,CAAC,IAAD,CAArD,yCAAOW,eAAP,eAAuBC,kBAAvB,eAHkD,QAKnCC,CAAAA,eALmC,iKAKlD,iBAA+BR,QAA/B,CAAwCC,IAAxC,CAA6CC,KAA7C,8HACEG,iBADF,uBAC0BT,CAAAA,SAAS,CAACa,wBAAV,CAAmCT,QAAnC,CAA4CC,IAA5C,CAAiDC,KAAjD,CAD1B,2EAEEK,kBAFF,uBAE4BX,CAAAA,SAAS,CAACc,yBAAV,CAAoCV,QAApC,CAA6CC,IAA7C,CAAkDC,KAAlD,CAF5B,sHALkD,kDAUhDR,SAAS,CAAC,QAASiB,CAAAA,eAAT,EAA0B,CAClCH,eAAe,CAACR,QAAD,CAAUC,IAAV,CAAeC,KAAf,CAAf,CACAU,OAAO,CAACC,GAAR,CAAYP,eAAZ,CAA4BF,cAA5B,EACD,CAHQ,CAGP,EAHO,CAAT,CAKA,GAAG,CAACE,eAAJ,CAAqB,mBAAO,KAAC,cAAD,IAAP,CACrB,GAAG,CAACF,cAAJ,CAAoB,mBAAO,KAAC,cAAD,IAAP,CAEpB,GAAIU,CAAAA,WAAW,CAAG,CAChBC,MAAM,CAAET,eAAe,CAACA,eAAhB,CAAgCU,GAAhC,CAAoC,SAAAC,CAAC,QAAEA,CAAAA,CAAC,CAAC,CAAD,CAAH,EAArC,CADQ,CAEhBC,QAAQ,CAAE,CACR,CACEC,EAAE,CAAE,CADN,CAEEC,KAAK,CAAE,SAFT,CAGEC,IAAI,CAAEf,eAAe,CAACA,eAAhB,CAAgCU,GAAhC,CAAoC,SAAAC,CAAC,QAAEA,CAAAA,CAAC,CAAC,CAAD,CAAH,EAArC,CAHR,CAIEK,WAAW,CAAE,EAJf,CAKEC,eAAe,CAAE,QALnB,CADQ,CAQR,CACIJ,EAAE,CAAE,CADR,CAEIC,KAAK,CAAE,QAFX,CAGIC,IAAI,CAAEjB,cAAc,CAACA,cAAf,CAA8BY,GAA9B,CAAkC,SAAAC,CAAC,QAAEA,CAAAA,CAAC,CAAC,CAAD,CAAH,EAAnC,CAHV,CAIIK,WAAW,CAAE,EAJjB,CAKIC,eAAe,CAAC,SAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBJ,CARQ,CAFM,CAAlB,CAwCA,mBACE,aAAK,SAAS,CAAC,gBAAf,WAsDGpB,UAtDH,cAuDE,KAAC,GAAD,EACI,KAAK,CAAE,CACHqB,YAAY,CAAC,OADV,CAEHC,WAAW,CAAC,OAFT,CADX,CAKE,YAAY,CAAC,IALf,CAME,IAAI,CAAEX,WANR,CAOE,OAAO,CAAG,CACRY,OAAO,CAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdS,CADD,CAPZ,EAvDF,GADF,CAuGH,CAED,cAAe3B,CAAAA,QAAf"},"metadata":{},"sourceType":"module"}