{"ast":null,"code":"var _jsxFileName = \"/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport jwt from \"jwt-decode\";\nimport LedgerApi from './Api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"ledger-token\";\n\nfunction App() {\n  _s();\n\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token); // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt.decode(token); // put the token on the Api class so it can use it to call the API.\n\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n\n      setInfoLoaded(true);\n    } // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n  /** Handles site-wide logout. */\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n  /** Checks if a job has been applied for. */\n\n\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n  /** Apply to a job: make API call and update set of application IDs. */\n\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser,\n        hasAppliedToJob,\n        applyToJob\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          login: login,\n          signup: signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"Ng9XeEGleJG0v7XKSnyO4s4IuTM=\", true);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BrowserRouter","React","useState","useEffect","jwt","LedgerApi","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currentUser","setCurrentUser","token","setToken","useLocalStorage","console","debug","loadUserInfo","getCurrentUser","username","decode","JoblyApi","applications","err","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob"],"sources":["/Users/ziyizhang/Desktop/springboard/personal-ledger/fronend/src/App.js"],"sourcesContent":["import './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport jwt from \"jwt-decode\";\nimport LedgerApi from './Api/api';\n\nexport const TOKEN_STORAGE_ID = \"ledger-token\";\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}