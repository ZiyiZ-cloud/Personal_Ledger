[{"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/index.js":"1","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/reportWebVitals.js":"2","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/App.js":"3","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/auth/SignupForm.js":"4","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/Api/api.js":"5","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/auth/LoginForm.js":"6","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/auth/UserContext.js":"7","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/routes-nav/Navigation.js":"8","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/hooks/useLocalStorage.js":"9","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/ExpenseForm.js":"10","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/profiles/Profile.js":"11","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/TotalExpenses.js":"12","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/AnnualExpenses.js":"13","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/profiles/ProfileForm.js":"14","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/SearchMonthly.js":"15","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/UpdateExpense.js":"16","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/CurrentMonthExpenses.js":"17","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/MonthlyExpenses.js":"18","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/homepage/Homepage.js":"19","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/LoadingSpinner.js":"20","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/DashBoard.js":"21","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/Search.js":"22","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Alert.js":"23","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/ExpenseCardList.js":"24","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/PopDeleteUser.js":"25","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/EarningCard.js":"26","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Balance.js":"27","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/Piechart.js":"28","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/MonthlyTotalPie.js":"29","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/homepage/HomepageLayout.js":"30","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/DashboardLayout.js":"31","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/ExpenseCard.js":"32","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/DashboardSidebar.js":"33","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/ui-component/SkeletonEarningCard.js":"34","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/ui-component/MainCard.js":"35","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/selector.js":"36","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/shopping-bag.js":"37","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/user-add.js":"38","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/x-circle.js":"39","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/lock.js":"40","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/chart-bar.js":"41","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/users.js":"42","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/cog.js":"43","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/user.js":"44","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/MonthlyCategory.js":"45","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Monthly.js":"46"},{"size":536,"mtime":1652843456291,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1652483291872,"results":"49","hashOfConfig":"48"},{"size":5093,"mtime":1653243768109,"results":"50","hashOfConfig":"48"},{"size":7513,"mtime":1652924394597,"results":"51","hashOfConfig":"48"},{"size":4665,"mtime":1653188034553,"results":"52","hashOfConfig":"48"},{"size":5894,"mtime":1653068061824,"results":"53","hashOfConfig":"48"},{"size":180,"mtime":1652484583825,"results":"54","hashOfConfig":"48"},{"size":6346,"mtime":1653243654825,"results":"55","hashOfConfig":"48"},{"size":1011,"mtime":1652484526508,"results":"56","hashOfConfig":"48"},{"size":11295,"mtime":1653086358612,"results":"57","hashOfConfig":"48"},{"size":3518,"mtime":1653084536831,"results":"58","hashOfConfig":"48"},{"size":2001,"mtime":1653075632478,"results":"59","hashOfConfig":"48"},{"size":1458,"mtime":1652707555974,"results":"60","hashOfConfig":"48"},{"size":7075,"mtime":1653084727077,"results":"61","hashOfConfig":"48"},{"size":4800,"mtime":1653076077661,"results":"62","hashOfConfig":"48"},{"size":11428,"mtime":1653086458089,"results":"63","hashOfConfig":"48"},{"size":5416,"mtime":1653244225755,"results":"64","hashOfConfig":"48"},{"size":5603,"mtime":1653244158936,"results":"65","hashOfConfig":"48"},{"size":2004,"mtime":1653244031485,"results":"66","hashOfConfig":"48"},{"size":243,"mtime":1652564880440,"results":"67","hashOfConfig":"48"},{"size":2686,"mtime":1653073030836,"results":"68","hashOfConfig":"48"},{"size":1525,"mtime":1653013136190,"results":"69","hashOfConfig":"48"},{"size":520,"mtime":1653086280447,"results":"70","hashOfConfig":"48"},{"size":3923,"mtime":1653075700292,"results":"71","hashOfConfig":"48"},{"size":1551,"mtime":1652996959443,"results":"72","hashOfConfig":"48"},{"size":4443,"mtime":1653188977527,"results":"73","hashOfConfig":"48"},{"size":324,"mtime":1652886029781,"results":"74","hashOfConfig":"48"},{"size":3188,"mtime":1652985033831,"results":"75","hashOfConfig":"48"},{"size":1083,"mtime":1653086985987,"results":"76","hashOfConfig":"48"},{"size":1638,"mtime":1652920624743,"results":"77","hashOfConfig":"48"},{"size":1051,"mtime":1653073010379,"results":"78","hashOfConfig":"48"},{"size":1086,"mtime":1652899954558,"results":"79","hashOfConfig":"48"},{"size":6224,"mtime":1653073076094,"results":"80","hashOfConfig":"48"},{"size":1121,"mtime":1652907370251,"results":"81","hashOfConfig":"48"},{"size":2474,"mtime":1652907393140,"results":"82","hashOfConfig":"48"},{"size":1324,"mtime":1653072889380,"results":"83","hashOfConfig":"48"},{"size":504,"mtime":1653072899364,"results":"84","hashOfConfig":"48"},{"size":382,"mtime":1653072909315,"results":"85","hashOfConfig":"48"},{"size":507,"mtime":1653072948711,"results":"86","hashOfConfig":"48"},{"size":388,"mtime":1653072878971,"results":"87","hashOfConfig":"48"},{"size":1491,"mtime":1653072774025,"results":"88","hashOfConfig":"48"},{"size":414,"mtime":1653072928355,"results":"89","hashOfConfig":"48"},{"size":792,"mtime":1653072869190,"results":"90","hashOfConfig":"48"},{"size":337,"mtime":1653072919996,"results":"91","hashOfConfig":"48"},{"size":1678,"mtime":1653244578760,"results":"92","hashOfConfig":"48"},{"size":5669,"mtime":1653243979524,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fobks3",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"103"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"103"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"103"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"103"},"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/index.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/reportWebVitals.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/App.js",[],[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/auth/SignupForm.js",["252","253","254","255","256"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\nimport LedgerApi from '../Api/api';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport image from '../image/signup-1.jpeg';\n\n\n\nconst theme = createTheme();\n\nfunction SignupForm({ signup }) {\n  const history = useNavigate();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"SignupForm\",\n      \"signup=\", typeof signup,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n  );\n\n  // Handle form submit:\n\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    try{\n        let result = await LedgerApi.signup(formData);\n    }catch(e){\n        setFormErrors(e);\n        return;\n    }\n    history(\"/\");\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(data => ({ ...data, [name]: value }));\n  }\n\n  return (\n      <div className=\"SignupForm\" >\n        {/* <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h2 className=\"mb-3\">Sign Up</h2>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label>First name</label>\n                  <input\n                      name=\"firstName\"\n                      className=\"form-control\"\n                      value={formData.firstName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last name</label>\n                  <input\n                      name=\"lastName\"\n                      className=\"form-control\"\n                      value={formData.lastName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control\"\n                      value={formData.email}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null\n                }\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary float-right\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div> */}\n    <ThemeProvider theme={theme}>\n        \n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderColor: 'white',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  name=\"username\"\n                  label=\"Username\"\n                  type=\"username\"\n                  id=\"username\"\n                  autoComplete=\"new-username\"\n                  value={formData.username}\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"given-name\"\n                  name=\"firstName\"\n                  required\n                  fullWidth\n                  id=\"firstName\"\n                  label=\"First Name\"\n                  autoFocus\n                  value={formData.firstName}\n                      onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"lastName\"\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  autoComplete=\"family-name\"\n                  value={formData.lastName}\n                      onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email Address\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  value={formData.email}\n                      onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"new-password\"\n                  value={formData.password}\n                      onChange={handleChange}\n                />\n              </Grid>\n              \n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link href=\"/login\" variant=\"body2\">\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n    \n      </div>\n  );\n}\n\nexport default SignupForm;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/Api/api.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/auth/LoginForm.js",["257","258","259"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport image from '../image/signin-1.jpeg';\n\nconst theme = createTheme();\n\n\nfunction LoginForm({login}){\n    const history = useNavigate();\n    const [formData,setFormData] = useState({\n        username:\"\",\n        password:\"\",\n    });\n\n    const [formErrors,setFormErrors] = useState([])\n\n    console.debug(\n        \"LoginForm\",\n        \"login=\", typeof login,\n        \"formData=\", formData,\n        \"formErrors=\", formErrors,\n    );\n\n    async function handleSubmit(e){\n        e.preventDefault();\n        let result = await login(formData);\n        if(result.success){\n            history(`/`);\n        }else{\n            setFormErrors(result.errors);\n        }\n    }\n\n    function handleChange(e){\n        const {name,value} = e.target;\n        setFormData(l =>({...l,[name]:value}))\n    }\n\n    return (\n      <div>\n        {/* <div className=\"LoginForm\">\n          <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n            <h3 className=\"mb-3\">Log In</h3>\n  \n            <div className=\"card\">\n              <div className=\"card-body\">\n                <form onSubmit={handleSubmit}>\n                  <div className=\"form-group\">\n                    <label>Username</label>\n                    <input\n                        name=\"username\"\n                        className=\"form-control\"\n                        value={formData.username}\n                        onChange={handleChange}\n                        autoComplete=\"username\"\n                        required\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Password</label>\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        className=\"form-control\"\n                        value={formData.password}\n                        onChange={handleChange}\n                        autoComplete=\"current-password\"\n                        required\n                    />\n                  </div>\n  \n                  {formErrors.length\n                      ? <Alert type=\"danger\" messages={formErrors} />\n                      : null}\n  \n                  <button\n                      className=\"btn btn-primary float-right\"\n                      onSubmit={handleSubmit}\n                  >\n                    Submit\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div> */}\n    <ThemeProvider theme={theme}>\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\n        <CssBaseline />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: 'url(https://source.unsplash.com/random)',\n            // backgroundImage: `url(${image})`,\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =>\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n              <TextField\n                margin=\"normal\"\n                fullWidth\n                id=\"username\"\n                label=\"Username\"\n                type='text'\n                autoFocus\n                value={formData.username}\n                onChange={handleChange}\n                name=\"username\"\n                autoComplete=\"username\"\n                required\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={formData.password}\n                onChange={handleChange}\n              />\n               {formErrors.length\n                      ? <Alert type=\"danger\" messages={formErrors} />\n                      : null}\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                onSubmit={handleSubmit}\n              >\n                Sign In\n              </Button>\n              <Grid container>\n                <Grid item>\n                  <Link href=\"/register\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n\n    </div>\n    );\n}\n\nexport default LoginForm;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/auth/UserContext.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/routes-nav/Navigation.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/hooks/useLocalStorage.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/ExpenseForm.js",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],[],"import React, { useState, useContext } from \"react\";\nimport LedgerApi from \"../Api/api\";\nimport UserContext from \"../auth/UserContext\";\nimport Alert from \"../common/Alert\";\nimport { useNavigate } from \"react-router-dom\";\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { InputLabel,Select,MenuItem} from '@mui/material';\n\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {DatePicker,MonthPicker,YearPicker,CalendarPicker,LocalizationProvider} from '@mui/lab';\n\n\nconst theme = createTheme();\n\nfunction ExpenseForm() {\n    const { currentUser, setCurrentUser } = useContext(UserContext);\n    const history = useNavigate();\n\n    const [formData, setFormData] = useState({\n      amount: \"\",\n      category: \"\",\n      detail: \"\",\n      date: \"\",\n      username:currentUser.user.username,\n    });\n    const [formErrors, setFormErrors] = useState([]);\n  \n    // switch to use our fancy limited-time-display message hook\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\n    // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\n  \n    console.debug(\n        \"ExpenseForm\",\n        \"currentUser=\", currentUser,\n        \"formData=\", formData,\n        \"formErrors=\", formErrors,\n        \"saveConfirmed=\", saveConfirmed,\n    );\n  \n    /** on form submit:\n     * - attempt save to backend & report any errors\n     * - if successful\n     *   - clear previous error messages and password\n     *   - show save-confirmed message\n     *   - set current user info throughout the site\n     */\n  \n    async function handleSubmit(evt) {\n      evt.preventDefault();\n  \n      let expenseData = {\n        amount: parseFloat(formData.amount).toFixed(2),\n        category: formData.category,\n        detail: formData.detail,\n        date: formData.date,\n        username: formData.username\n      };\n  \n      let username = formData.username;\n      let newExpense\n      if(formData.amount === null||formData.amount === \"\"){\n        setFormErrors([`Amount can not be null`]);\n        return;\n      }\n      if(expenseData.category === \"\"||expenseData.category ===''){\n        setFormErrors([`You must specify a category`]);\n        return;\n      }\n      if(expenseData.date === \"\"){\n        setFormErrors([`You must provide a date`]);\n        return;\n      }\n\n      try {\n        newExpense = await LedgerApi.addExpense(username, expenseData);\n      } catch (errors) {\n        \n      }\n  \n      history(`/expenses`);\n  \n    }\n  \n    /** Handle form data changing */\n    function handleChange(evt) {\n      const { name, value } = evt.target;\n      // if(name === \"category\" && value ===\"\"){\n      //   setFormErrors(['Category is required']);\n      // }\n      setFormData(f => ({\n        ...f,\n        [name]: value,\n      }));\n      setFormErrors([]);\n    }\n\n    return (\n        <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n          {/* <h3>Add New Expense</h3>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <p className=\"form-control-plaintext\">{formData.username}</p>\n                </div>\n                <div className=\"form-group\">\n                <p>Enter a positive number for Income or a negative number for Expense</p>\n                  <label>Amount</label>\n                  <input\n                      type=\"number\"\n                      name=\"amount\"\n                      className=\"form-control\"\n                      value={formData.amount}\n                      onChange={handleChange}\n                      required\n                      requiredTxt ='Amount can not be empty.'\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Category</label>        \n                  <select name=\"category\"\n                      className=\"form-control\"\n                      value={formData.category}\n                      onChange={handleChange}>\n                    <option>Choose a Category</option> \n                    <option value=\"housing\">Housing</option>\n                    <option value=\"food\">Food</option>\n                    <option value=\"fun\">Fun</option>\n                    <option value=\"child-expenses\">Child Expenses</option>\n                    <option value=\"insurance\">Insurance</option>\n                    <option value=\"healthcare\">Healthcare</option>\n                    <option value=\"utilities\">Utilities</option>\n                    <option value=\"personal-care\">Personal Care</option>\n                    <option value=\"taxes\">Taxes</option>\n                    <option value=\"transportation\">Transportation</option>\n                    <option value=\"gifts\">Gifts</option>\n                    <option value=\"income\">Income</option>\n                    <option value=\"givings\">Givings</option>\n                    <option value=\"house-supplies\">House Supplies</option>\n                    <option value=\"consumer-debt\">Consumer Debt</option>\n                    <option value=\"clothing\">Clothing</option>\n                    <option value=\"savings\">Savings</option>\n                    <option value=\"pets\">Pets</option>\n                    <option value=\"services-membership\">Services Membership</option>\n                    <option value=\"others\">Others</option>                    \n                  </select>\n       \n                </div>\n                <div className=\"form-group\">\n                  <label>Detail</label>\n                  <input\n                      name=\"detail\"\n                      className=\"form-control\"\n                      value={formData.detail}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Date</label>\n                  <input\n                    type=\"date\"\n                      name=\"date\"\n                      className=\"form-control\"\n                      value={formData.date}\n                      onChange={handleChange}\n                  />\n                </div>\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n                <button\n                    className=\"btn btn-primary btn-block mt-4\"\n                    onClick={handleSubmit}\n                >\n                  Add Transaction\n                </button>\n              </form>\n            </div>\n          </div> */}\n          <ThemeProvider theme={theme}>\n        \n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderColor: 'white',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Add New Expense\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n            <Grid item xs={12}>\n            <p>Enter a positive number for Income or a negative number for Expense</p>\n                <TextField\n                  required\n                  fullWidth\n                  name=\"amount\"\n                  label=\"Amount\"\n                  type=\"number\"\n                  id=\"amount\"\n                  autoComplete=\"new-username\"\n                  value={formData.amount}\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n              <InputLabel id=\"categorylabel\">Category</InputLabel>\n                <Select\n                  label=\"category\"\n                  id=\"category\"\n                  fullWidth\n                  value={formData.category}\n                  label=\"Category\"\n                  required\n                  name = 'category'\n\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"housing\">Housing</MenuItem>\n                  <MenuItem value=\"food\">Food</MenuItem>\n                  <MenuItem value=\"fun\">Fun</MenuItem>\n                  <MenuItem value=\"child-expenses\">Child Expenses</MenuItem>\n                  <MenuItem value=\"insurance\">Insurance</MenuItem>\n                  <MenuItem value=\"healthcare\">Healthcare</MenuItem>\n                  <MenuItem value=\"utilities\">Utilities</MenuItem>\n                  <MenuItem value=\"personal-care\">Personal Care</MenuItem>\n                  <MenuItem value=\"taxes\">Taxes</MenuItem>\n                  <MenuItem value=\"transportation\">Transportation</MenuItem>\n                  <MenuItem value=\"gifts\">Gifts</MenuItem>\n                  <MenuItem value=\"income\">Income</MenuItem>\n                  <MenuItem value=\"givings\">Givings</MenuItem>\n                  <MenuItem value=\"house-supplies\">House Supplies</MenuItem>\n                  <MenuItem value=\"consumer-debt\">Consumer Debt</MenuItem>\n                  <MenuItem value=\"clothing\">Clothing</MenuItem>\n                  <MenuItem value=\"savings\">Savings</MenuItem>\n                  <MenuItem value=\"pets\">Pets</MenuItem>\n                  <MenuItem value=\"services-membership\">Services Membership</MenuItem>\n                  <MenuItem value=\"others\">Others</MenuItem>\n                </Select>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"detail\"\n                  label=\"Detail\"\n                  name=\"detail\"\n                  autoComplete=\"detail\"\n                  value={formData.detail}\n                      onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                  <TextField\n                      fullWidth\n                      id='date'\n                      type=\"date\"\n                      name=\"date\"\n                      className=\"form-control\"\n                      value={formData.date}\n                      onChange={handleChange}\n                  />\n              </Grid>\n              <Grid item xs={12}>\n              {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Add New Expense\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n        </div>\n    );\n  }\n  \n  export default ExpenseForm;\n  ","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/profiles/Profile.js",["275","276","277","278","279","280","281","282","283"],[],"import React, {useState,useEffect,useContext}  from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport UserContext from '../auth/UserContext';\nimport { useNavigate } from \"react-router-dom\";\nimport PopupUser from '../common/PopDeleteUser';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\n\nfunction Profile(){\n    const history = useNavigate();\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n    const [popup, setPopup] = useState({\n        show: false\n      });\n    function handleSubmit (evt){\n        evt.preventDefault();\n        history(`/${currentUser.user.username}/edit`);\n    }\n\n    function deleteUser (evt){\n        evt.preventDefault();\n        setPopup({show:true});\n    }\n\n    if(!currentUser.user.username){\n        history(`/`);\n    }\n\n    return (\n        <div>\n            {/* <div>\n            Username:{currentUser.user.username}\n            </div>\n            <div>\n            First Name:{currentUser.user.first_name}\n            </div>\n            <div>\n            Last Name:{currentUser.user.last_name}\n            </div>\n            <div>\n            Email:{currentUser.user.email}\n            </div>\n            <button onClick={handleSubmit}>Edit</button>\n            <button onClick={deleteUser}>Delete User</button>\n            {popup.show && <PopupUser popup={popup} setPopup={setPopup} />} */}\n            <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderColor: 'white',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Username: {currentUser.user.username}\n          </Typography>\n          <Box component=\"form\" noValidate sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                 First Name: {currentUser.user.first_name}\n              </Grid>\n              <Grid item xs={12} sm={6}>\n              Last Name: {currentUser.user.last_name}\n\n              </Grid>\n              <Grid item xs={12}>\n              Email: {currentUser.user.email}\n\n              </Grid>\n            </Grid>\n            <Button\n                onClick={handleSubmit}\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Edit User Info\n            </Button>\n            <Button\n                onClick={deleteUser}\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 ,backgroundColor:'red'}}\n            >\n              Delete User\n            </Button>\n            {popup.show && <PopupUser popup={popup} setPopup={setPopup} />}\n          </Box>\n        </Box>\n      </Container>\n        </div>\n    )\n\n}\n\nexport default Profile;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/TotalExpenses.js",["284","285","286","287","288","289","290","291"],[],"import React, {useState,useEffect,useContext} from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from '../common/LoadingSpinner'\nimport UserContext from '../auth/UserContext';\nimport ExpenseCardList from './ExpenseCardList';\nimport { useNavigate } from \"react-router-dom\";\nimport EarningCard from '../MUI/DashBoard/EarningCard';\n\n\n\n\nfunction TotalExpenses(){\n\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n\n    const history = useNavigate();\n\n    const [expenses, setExpenses] = useState(null);\n\n    const CurrentUser = currentUser.user.username;;\n\n    useEffect(function getExpenses(){\n        getUserExpenses(CurrentUser);\n    },[]);\n\n    let newDate = new Date;\n\n    let month = newDate.getMonth()+1;\n    let year = newDate.getFullYear();\n\n    async function getUserExpenses(username){\n        let result = await LedgerApi.getCurrentExpenses(username);\n        console.log(result);\n        setExpenses(result)\n    }\n\n    function addExpense (evt){\n        evt.preventDefault();\n        history(`/expenses/add`);\n    }\n\n    function currentMonth (evt){\n        evt.preventDefault();\n        history(`/expenses/currentmonth`);\n    }\n\n    function currentYear (evt){\n        evt.preventDefault();\n        history(`/expenses/year/${year}`);\n    }\n\n    if(!expenses) return <LoadingSpinner />;\n\n    console.log(expenses.length);\n\n    return (\n        <div>\n            <div>\n                {/* <button onClick={addExpense}>Add New Expense</button>\n                <button onClick={currentMonth}>Current Month Expenses</button> */}\n                {expenses.expenses.length\n                    ?<div><ExpenseCardList expenses={expenses.expenses}/>\n                        </div>\n                    :<p className=\"lead\">Sorry, no results were found!</p>\n                }\n               \n                {/* <button onClick={currentYear}>Current Annual Expenses</button> */}\n            </div>\n            \n        </div>\n    )\n\n}\n\nexport default TotalExpenses;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/AnnualExpenses.js",["292","293","294"],[],"import React, {useState,useEffect,useContext} from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from '../common/LoadingSpinner'\nimport UserContext from '../auth/UserContext';\nimport ExpenseCardList from './ExpenseCardList';\nimport { useNavigate } from \"react-router-dom\";\n\n\n\n\nfunction AnnualExpenses(){\n\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n\n    const history = useNavigate();\n\n    const [expenses, setExpenses] = useState(null);\n\n    const CurrentUser = currentUser.user.username;;\n\n    useEffect(function getExpenses(){\n        getUserExpenses(CurrentUser);\n    },[]);\n\n    let newDate = new Date;\n\n    let year = newDate.getFullYear();\n\n    async function getUserExpenses(username){\n        let result = await LedgerApi.getByYear(username,year);\n        console.log(result);\n        setExpenses(result)\n    }\n\n    function handleSubmit (evt){\n        evt.preventDefault();\n        history(`/expenses/add`);\n    }\n\n    if(!expenses) return <LoadingSpinner />;\n\n    console.log(expenses.length);\n\n    return (\n        <div>\n            <div>\n                {expenses.expenses.length\n                    ?<ExpenseCardList expenses={expenses.expenses}/>\n                    :<p className=\"lead\">Sorry, no results were found!</p>\n                }\n                <button onClick={handleSubmit}>Add New Expense</button>\n            </div>\n            \n        </div>\n    )\n\n}\n\nexport default AnnualExpenses;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/profiles/ProfileForm.js",["295","296","297","298","299","300"],[],"import React, { useState, useContext } from \"react\";\nimport LedgerApi from \"../Api/api\";\nimport UserContext from \"../auth/UserContext\";\nimport Alert from \"../common/Alert\";\nimport { useNavigate } from \"react-router-dom\";\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n\n\nconst theme = createTheme();\n\nfunction ProfileForm() {\n    const { currentUser, setCurrentUser } = useContext(UserContext);\n    const [formData, setFormData] = useState({\n      firstName: currentUser.user.first_name,\n      lastName: currentUser.user.last_name,\n      email: currentUser.user.email,\n      username: currentUser.user.username,\n      password: \"\",\n    });\n    const [formErrors, setFormErrors] = useState([]);\n    \n    const history = useNavigate();\n\n    // switch to use our fancy limited-time-display message hook\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\n    // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\n  \n    console.debug(\n        \"ProfileForm\",\n        \"currentUser=\", currentUser,\n        \"formData=\", formData,\n        \"formErrors=\", formErrors,\n        \"saveConfirmed=\", saveConfirmed,\n    );\n  \n    /** on form submit:\n     * - attempt save to backend & report any errors\n     * - if successful\n     *   - clear previous error messages and password\n     *   - show save-confirmed message\n     *   - set current user info throughout the site\n     */\n  \n    async function handleSubmit(evt) {\n      evt.preventDefault();\n  \n      let profileData = {\n        first_name: formData.firstName,\n        last_name: formData.lastName,\n        email: formData.email,\n      };\n  \n      let username = formData.username;\n      let updatedUser;\n  \n      try {\n        updatedUser = await LedgerApi.updateCurrentUser(username, profileData);\n      } catch (errors) {\n        debugger;\n        setFormErrors(errors);\n        return;\n      }\n  \n      setFormData(f => ({ ...f, password: \"\" }));\n      setFormErrors([]);\n      setSaveConfirmed(true);\n  \n      // trigger reloading of user information throughout the site\n      setCurrentUser(updatedUser);\n      history(`/profile`);\n    }\n  \n    /** Handle form data changing */\n    function handleChange(evt) {\n      const { name, value } = evt.target;\n      setFormData(f => ({\n        ...f,\n        [name]: value,\n      }));\n      setFormErrors([]);\n    }\n  \n    return (\n        <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n          {/* <h3>Profile</h3> */}\n          {/* <div className=\"card\">\n            <div className=\"card-body\">\n              <form>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <p className=\"form-control-plaintext\">{formData.username}</p>\n                </div>\n                <div className=\"form-group\">\n                  <label>First Name</label>\n                  <input\n                      name=\"firstName\"\n                      className=\"form-control\"\n                      value={formData.firstName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last Name</label>\n                  <input\n                      name=\"lastName\"\n                      className=\"form-control\"\n                      value={formData.lastName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                      name=\"email\"\n                      className=\"form-control\"\n                      value={formData.email}\n                      onChange={handleChange}\n                  />\n                </div>\n                \n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n  \n                {saveConfirmed\n                    ?\n                    <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                    : null}\n  \n                <button\n                    className=\"btn btn-primary btn-block mt-4\"\n                    onClick={handleSubmit}\n                >\n                  Save Changes\n                </button>\n              </form>\n            </div>\n          </div> */}\n          \n          <ThemeProvider theme={theme}>\n        \n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderColor: 'white',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Username: {formData.username}\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"given-name\"\n                  name=\"firstName\"\n                  required\n                  fullWidth\n                  id=\"firstName\"\n                  label=\"First Name\"\n                  autoFocus\n                  value={formData.firstName}\n                      onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"lastName\"\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  autoComplete=\"family-name\"\n                  value={formData.lastName}\n                      onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email Address\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  value={formData.email}\n                      onChange={handleChange}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Save Changes\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n        </div>\n    );\n  }\n  \n  export default ProfileForm;\n  ","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/SearchMonthly.js",["301","302","303","304","305","306","307","308","309","310","311"],[],"import React, {useState,useEffect,useContext} from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from '../common/LoadingSpinner'\nimport UserContext from '../auth/UserContext';\nimport ExpenseCardList from './ExpenseCardList';\nimport { useNavigate } from \"react-router-dom\";\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {DatePicker,MonthPicker,YearPicker,CalendarPicker,LocalizationProvider} from '@mui/lab';\nimport { Grid,Button,Box , Container} from '@mui/material';\n\n\n\n\nconst minDate = new Date('2020-01-01T00:00:00.000');\nconst maxDate = new Date('2034-01-01T00:00:00.000');\n\nfunction SearchMonthly(){\n    const [date, setDate] = useState(null)\n\n\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n    const [formData, setFormData] = useState({\n        date: \"\",\n    });\n    const [formErrors, setFormErrors] = useState([]);\n\n    const history = useNavigate();\n\n    const [expenses, setExpenses] = useState(null);\n\n    const CurrentUser = currentUser.user.username;;\n\n    useEffect(function getExpenses(){\n        getUserExpenses(CurrentUser);\n    },[]);\n\n    let newDate = new Date;\n\n    let month = newDate.getMonth()+1;\n    let year = newDate.getFullYear();\n\n\n    async function getUserExpenses(username){\n        let result = await LedgerApi.getByMonth(username,year,month);\n        console.log(result);\n        setExpenses(result)\n    }\n\n    function addExpense (evt){\n        evt.preventDefault();\n        history(`/expenses/add`);\n    }\n\n    /** Handle form data changing */\n    function handleChange(evt) {\n        const { name, value } = evt.target;\n        setFormData(f => ({\n            ...f,\n            [name]: value,\n        }));\n        setFormErrors([]);\n        }\n\n    function selectedMonth (evt){\n        evt.preventDefault();\n        let newYear;\n        let newMonth;\n        let newDate = new Date(date)\n        newYear = newDate.getFullYear();\n        newMonth = newDate.getMonth()+1;\n        console.log(newMonth.newYear);\n        history(`/expenses/year/${newYear}/month/${newMonth}`);\n    }\n\n    if(!expenses) return <LoadingSpinner />;\n\n    console.log(expenses.length);\n\n    return (\n        <div>\n            {/* <div>\n                <form onSubmit={selectedMonth}>\n                <div className=\"form-group\">\n                  <label>Date</label>\n                  <input\n                    type=\"date\"\n                      name=\"date\"\n                      className=\"form-control\"\n                      value={formData.date}\n                      onChange={handleChange}\n                  />\n                </div>\n                <button onClick={selectedMonth}>Search Monthly Expenses</button>\n                </form>\n            </div> */}\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                    <CalendarPicker date={date} onChange={(newDate) => setDate(newDate)} />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                    <MonthPicker\n                        date={date}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onChange={(newDate) => setDate(newDate)}\n                    />\n                    </Grid>\n                    <Grid item xs={11} md={5}>\n                    {/* <YearPicker\n                        date={date}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        isDateDisabled={() => false}\n                        onChange={(newDate) => setDate(newDate)}\n                    /> */}\n                    </Grid>\n                    <Box textAlign='center'>\n                    <Button variant='contained' style={{justifyContent: 'center'}} onClick={selectedMonth}>\n                        Search By Month\n                    </Button>\n                    </Box>\n                </Grid>\n                </LocalizationProvider>\n                {/* <button onClick={selectedMonth}>Search Monthly Expenses</button> */}\n                {/* <Grid container justify=\"center\">\n                    <Button color=\"primary\" size=\"large\" type=\"submit\" variant=\"contained\">\n                    Sign Up\n                    </Button>\n                </Grid>\n                <Button\n                    justify='center'\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    size=\"large\"\n                    component=\"a\"\n                    onClick={selectedMonth}\n                    sx={{ minWidth: 200 }}\n                >\n                    Search Monthly Expense\n                </Button>\n             */}\n        </div>\n    )\n\n}\n\nexport default SearchMonthly;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/UpdateExpense.js",["312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328"],[],"import React, { useState, useContext,useEffect } from \"react\";\nimport LedgerApi from \"../Api/api\";\nimport UserContext from \"../auth/UserContext\";\nimport Alert from \"../common/Alert\";\nimport { useNavigate,useParams } from \"react-router-dom\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport { InputLabel,Select,MenuItem} from '@mui/material';\n\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {DatePicker,MonthPicker,YearPicker,CalendarPicker,LocalizationProvider} from '@mui/lab';\n\n\nconst theme = createTheme();\n\nfunction UpdateExpense() {\n    const { currentUser, setCurrentUser } = useContext(UserContext);\n    const history = useNavigate();\n\n    let {username, id} = useParams()\n\n    useEffect(function getcurrentExpense() {\n        async function getCurrentExpense() {\n            let currentExpense = await LedgerApi.getExpenseById(username,id);\n            setFormData({amount:currentExpense[0].amount,\n                    category:currentExpense[0].category,\n                    detail:currentExpense[0].detail,\n                    date:currentExpense[0].date.split('T')[0]})\n        }\n        getCurrentExpense();\n    },[]);\n\n\n    const [formData, setFormData] = useState({\n      amount: \"\",\n      category: \"\",\n      detail: \"\",\n      date: \"\",\n      username:currentUser.user.username,\n    });\n    const [formErrors, setFormErrors] = useState([]);\n  \n    // switch to use our fancy limited-time-display message hook\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\n  \n    async function handleSubmit(evt) {\n      evt.preventDefault();\n  \n      let expenseData = {\n        amount: formData.amount,\n        category: formData.category,\n        detail: formData.detail,\n        date: formData.date,\n      };\n  \n      let username = currentUser.user.username;\n      let newExpense\n\n      if(expenseData.category === \"\"){\n        setFormErrors([]);\n      }\n\n      try {\n        newExpense = await LedgerApi.updateExpense(username,id,expenseData);\n      } catch (errors) {\n        setFormErrors(errors);\n        return;\n      }\n  \n      history(`/expenses`);\n  \n    }\n  \n    /** Handle form data changing */\n    function handleChange(evt) {\n      const { name, value } = evt.target;\n      if(name === \"category\" && value ===\"\"){\n        setFormErrors(['Category is required']);\n      }\n      setFormData(f => ({\n        ...f,\n        [name]: value,\n      }));\n      setFormErrors([]);\n    }\n\n    if(!formData) return <LoadingSpinner />;\n\n  \n    return (\n        <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n          {/* <h3>Update {formData.category}</h3>\n          <div className=\"card\">\n            <div className=\"card-body\">\n            <div>\n            </div>\n              <form>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <p className=\"form-control-plaintext\">{formData.username}</p>\n                </div>\n                <div className=\"form-group\">\n                <p>Enter a positive number for Income or a negative number for Expense</p>\n                  <label>Amount</label>\n                  <input\n                    type=\"number\"\n                      name=\"amount\"\n                      className=\"form-control\"\n                      value={formData.amount}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Category</label>        \n                  <select name=\"category\"\n                      className=\"form-control\"\n                      value={formData.category}\n                      onChange={handleChange}\n                      >\n                    <option>Choose a Category</option> \n                    <option value=\"housing\">Housing</option>\n                    <option value=\"food\">Food</option>\n                    <option value=\"fun\">Fun</option>\n                    <option value=\"child-expenses\">Child Expenses</option>\n                    <option value=\"insurance\">Insurance</option>\n                    <option value=\"healthcare\">Healthcare</option>\n                    <option value=\"utilities\">Utilities</option>\n                    <option value=\"personal-care\">Personal Care</option>\n                    <option value=\"taxes\">Taxes</option>\n                    <option value=\"transportation\">Transportation</option>\n                    <option value=\"gifts\">Gifts</option>\n                    <option value=\"income\">Income</option>\n                    <option value=\"givings\">Givings</option>\n                    <option value=\"house-supplies\">House Supplies</option>\n                    <option value=\"consumer-debt\">Consumer Debt</option>\n                    <option value=\"clothing\">Clothing</option>\n                    <option value=\"savings\">Savings</option>\n                    <option value=\"pets\">Pets</option>\n                    <option value=\"services-membership\">Services Membership</option>\n                    <option value=\"others\">Others</option>                    \n                  </select> \n      \n                </div> \n                <div className=\"form-group\">\n                  <label>Detail</label>\n                  <input\n                      name=\"detail\"\n                      className=\"form-control\"\n                      value={formData.detail}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Date</label>\n                  <input\n                    type=\"date\"\n                      name=\"date\"\n                      className=\"form-control\"\n                      value={formData.date}\n                      onChange={handleChange}\n                  />\n                </div>\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n  \n                {saveConfirmed\n                    ?\n                    <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                    : null}\n  \n                <button\n                    className=\"btn btn-primary btn-block mt-4\"\n                    onClick={handleSubmit}\n                >\n                  Update Transaction\n                </button>\n              </form>\n            </div>\n          </div> */}\n          <ThemeProvider theme={theme}>\n        \n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <Box\n            sx={{\n              marginTop: 8,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              borderColor: 'white',\n            }}\n          >\n            <Typography component=\"h1\" variant=\"h5\">\n              Update Your Expense\n            </Typography>\n            <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n              <Grid container spacing={2}>\n              <Grid item xs={12}>\n              <p>Enter a positive number for Income or a negative number for Expense</p>\n                  <TextField\n                    required\n                    fullWidth\n                    name=\"amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    id=\"amount\"\n                    autoComplete=\"new-username\"\n                    value={formData.amount}\n                    onChange={handleChange}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                <InputLabel id=\"categorylabel\">Category</InputLabel>\n                  <Select\n                    label=\"category\"\n                    id=\"category\"\n                    fullWidth\n                    value={formData.category}\n                    label=\"Category\"\n                    required\n                    name = 'category'\n  \n                    onChange={handleChange}\n                  >\n                    <MenuItem value=\"housing\">Housing</MenuItem>\n                    <MenuItem value=\"food\">Food</MenuItem>\n                    <MenuItem value=\"fun\">Fun</MenuItem>\n                    <MenuItem value=\"child-expenses\">Child Expenses</MenuItem>\n                    <MenuItem value=\"insurance\">Insurance</MenuItem>\n                    <MenuItem value=\"healthcare\">Healthcare</MenuItem>\n                    <MenuItem value=\"utilities\">Utilities</MenuItem>\n                    <MenuItem value=\"personal-care\">Personal Care</MenuItem>\n                    <MenuItem value=\"taxes\">Taxes</MenuItem>\n                    <MenuItem value=\"transportation\">Transportation</MenuItem>\n                    <MenuItem value=\"gifts\">Gifts</MenuItem>\n                    <MenuItem value=\"income\">Income</MenuItem>\n                    <MenuItem value=\"givings\">Givings</MenuItem>\n                    <MenuItem value=\"house-supplies\">House Supplies</MenuItem>\n                    <MenuItem value=\"consumer-debt\">Consumer Debt</MenuItem>\n                    <MenuItem value=\"clothing\">Clothing</MenuItem>\n                    <MenuItem value=\"savings\">Savings</MenuItem>\n                    <MenuItem value=\"pets\">Pets</MenuItem>\n                    <MenuItem value=\"services-membership\">Services Membership</MenuItem>\n                    <MenuItem value=\"others\">Others</MenuItem>\n                  </Select>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"detail\"\n                    label=\"Detail\"\n                    name=\"detail\"\n                    autoComplete=\"detail\"\n                    value={formData.detail}\n                        onChange={handleChange}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        id='date'\n                        type=\"date\"\n                        name=\"date\"\n                        className=\"form-control\"\n                        value={formData.date}\n                        onChange={handleChange}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                {formErrors.length\n                      ? <Alert type=\"danger\" messages={formErrors} />\n                      : null}\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Update Your Expense\n              </Button>\n            </Box>\n          </Box>\n        </Container>\n      </ThemeProvider>\n        </div>\n    );\n  }\n  \n  export default UpdateExpense;\n  ","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/CurrentMonthExpenses.js",["329","330"],[],"import React, {useState,useEffect,useContext} from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from '../common/LoadingSpinner'\nimport UserContext from '../auth/UserContext';\nimport ExpenseCardList from './ExpenseCardList';\nimport LineChart from '../common/Monthly';\nimport PieChart from '../common/MonthlyCategory';\nimport EarningCard from '../MUI/DashBoard/EarningCard';\nimport { Grid,Box , Container} from '@mui/material';\nimport TotalPieChart from '../common/MonthlyTotalPie';\n\nfunction CurrentMonthExpenses(){\n\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n\n    const [expenses, setExpenses] = useState(null);\n    const [spending,setSpending] = useState(null);\n    const [saving,setSaving] = useState(null);\n    const [totalIncome,setTotalIncome] = useState(null);\n    const [TotalExpense,setTotalExpense] = useState(null); \n\n    const CurrentUser = currentUser.user.username;;\n\n    useEffect(function getExpenses(){\n        getUserExpenses(CurrentUser);\n        getUserMonthlySaving(CurrentUser);\n        getUserMonthlySpending(CurrentUser);\n        getMonthlyTotalIncome(CurrentUser);\n        getMonthlyTotalExpense(CurrentUser);\n        console.log(spending,saving,totalIncome,TotalExpense)\n    },[]);\n\n    let newDate = new Date();\n\n    let month = newDate.getMonth()+1;\n    let year = newDate.getFullYear();\n\n\n    async function getUserExpenses(username){\n        let result = await LedgerApi.getByMonth(username,year,month);\n        setExpenses(result)\n    }\n\n    async function getUserMonthlySpending(username){\n        let result = await LedgerApi.getExpensesByDay(username,year,month);\n        setSpending(result)\n    }\n    async function getUserMonthlySaving(username){\n        let result = await LedgerApi.getIncomesByDay(username,year,month);\n        setSaving(result) \n    }\n    async function getMonthlyTotalIncome(username){\n        let result = await LedgerApi.getMonthlyTotalIncome(username,year,month);\n        setTotalIncome(result)\n    }\n    async function getMonthlyTotalExpense(username){\n        let result = await LedgerApi.getMonthlyTotalExpense(username,year,month);\n        setTotalExpense(result)\n    }\n\n    if(!expenses) return <LoadingSpinner />;\n    if(!totalIncome) return <LoadingSpinner />;\n    if(!TotalExpense) return <LoadingSpinner />;\n\n    let title = `${year} - ${month}`;\n\n    return (\n        <div>\n            <div>\n                {expenses.expenses.length\n                    ?<div>                       \n                        <Grid container spacing={3}>\n                            <Grid item lg={4} md={6} sm={6} xs={12}>\n                            <EarningCard cardName={\"Monthly Expenses\"} amount={title}/>\n                            </Grid>\n                            <Grid item lg={4} md={6} sm={6} xs={12}>\n                            <EarningCard cardName={\"Total Income\"} amount={totalIncome.monthlytotalIncome.toFixed(2)}/>\n                            </Grid>\n                            <Grid item lg={4} md={6} sm={6} xs={12}>\n                            <EarningCard cardName={\"Total Expense\"} amount={TotalExpense.monthlytotalExpense.toFixed(2)}/>\n                            </Grid>\n                        </Grid>\n                        <Box\n                            component=\"main\"\n                            sx={{\n                                flexGrow: 1,\n                                py: 8\n                            }}\n                            >\n                            <Container maxWidth={false}>\n                                <Grid\n                                container\n                                spacing={3}\n                                >\n                                \n                                <Grid\n                                    item\n                                    lg={8}\n                                    md={12}\n                                    xl={9}\n                                    xs={12}\n                                >\n                                    <LineChart username={CurrentUser} year={year} month={month} chartTitle={title}/>\n\n                                </Grid>\n                                <Grid\n                                    item\n                                    lg={4}\n                                    md={6}\n                                    xl={3}\n                                    xs={12}\n                                >                                    \n                                    <TotalPieChart totalIncome={totalIncome.monthlytotalIncome} totalExpense={TotalExpense.monthlytotalExpense} />\n                                </Grid>\n   \n                                </Grid>\n                            </Container>\n                            </Box>\n                            <PieChart username={CurrentUser} year={year} month={month} chartTitle={'Monthly Category Expenses'}/>\n                        <ExpenseCardList expenses={expenses.expenses}/>\n                    </div>\n                    \n                    :<p className=\"lead\">Sorry, no results were found!</p>\n                }\n                \n                {/* <button onClick={addExpense}>Add New Expense</button> */}\n                {/* <button onClick={searchMonthly}>Search By Month</button> */}\n            </div>\n            \n        </div>\n    )\n\n}\n\nexport default CurrentMonthExpenses;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/MonthlyExpenses.js",["331","332"],[],"import React, {useState,useEffect,useContext} from 'react';\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from '../common/LoadingSpinner'\nimport UserContext from '../auth/UserContext';\nimport ExpenseCardList from './ExpenseCardList';\nimport { useParams } from \"react-router-dom\";\nimport LineChart from '../common/Monthly';\nimport PieChart from '../common/MonthlyCategory';\nimport TotalPieChart from '../common/MonthlyTotalPie';\nimport EarningCard from '../MUI/DashBoard/EarningCard';\nimport { Grid,Box , Container} from '@mui/material';\n\n\nfunction MonthlyExpenses(){\n\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n\n    let {year, month} = useParams()\n\n    const [expenses, setExpenses] = useState(null);\n\n    const [spending,setSpending] = useState(null);\n    const [saving,setSaving] = useState(null);\n    const [totalIncome,setTotalIncome] = useState(null);\n    const [TotalExpense,setTotalExpense] = useState(null); \n\n    const CurrentUser = currentUser.user.username;\n\n    useEffect(function getExpenses(){\n        getUserExpenses(CurrentUser);\n        getUserMonthlySaving(CurrentUser);\n        getUserMonthlySpending(CurrentUser);\n        getMonthlyTotalIncome(CurrentUser);\n        getMonthlyTotalExpense(CurrentUser);\n        console.log(spending,saving)\n    },[]);\n\n    async function getUserExpenses(username){\n        let result = await LedgerApi.getByMonth(username,year,month);\n        setExpenses(result)\n    }\n    async function getUserMonthlySpending(username){\n        let result = await LedgerApi.getExpensesByDay(username,year,month);\n        setSpending(result)\n    }\n    async function getUserMonthlySaving(username){\n        let result = await LedgerApi.getIncomesByDay(username,year,month);\n        setSaving(result)\n    }\n    async function getMonthlyTotalIncome(username){\n        let result = await LedgerApi.getMonthlyTotalIncome(username,year,month);\n        setTotalIncome(result)\n    }\n    async function getMonthlyTotalExpense(username){\n        let result = await LedgerApi.getMonthlyTotalExpense(username,year,month);\n        setTotalExpense(result)\n    }\n\n    if(!expenses) return <LoadingSpinner />;\n    if(!totalIncome) return <LoadingSpinner />;\n    if(!TotalExpense) return <LoadingSpinner />;\n\n    let title = `${year} - ${month} Expenses`;\n\n    return (\n        <div>\n            <div>\n                {expenses.expenses.length\n                    ?   <div>\n                        <Grid container spacing={3}>\n                            <Grid item lg={4} md={6} sm={6} xs={12}>\n                            <EarningCard cardName={\"Total Income\"} amount={title}/>\n                            </Grid>\n                            <Grid item lg={4} md={6} sm={6} xs={12}>\n                            <EarningCard cardName={\"Total Income\"} amount={totalIncome.monthlytotalIncome.toFixed(2)}/>\n                            </Grid>\n                            <Grid item lg={4} md={6} sm={6} xs={12}>\n                            <EarningCard cardName={\"Total Expense\"} amount={TotalExpense.monthlytotalExpense.toFixed(2)}/>\n                            </Grid>\n                        </Grid>\n                        <Box\n                            component=\"main\"\n                            sx={{\n                                flexGrow: 1,\n                                py: 8\n                            }}\n                            >\n                            <Container maxWidth={false}>\n                                <Grid\n                                container\n                                spacing={3}\n                                >\n                                \n                                <Grid\n                                    item\n                                    lg={8}\n                                    md={12}\n                                    xl={9}\n                                    xs={12}\n                                >\n                                    <LineChart username={CurrentUser} year={year} month={month} chartTitle={title}/>\n\n                                </Grid>\n                                <Grid\n                                    item\n                                    lg={4}\n                                    md={6}\n                                    xl={3}\n                                    xs={12}\n                                >                                    \n                                    <TotalPieChart totalIncome={totalIncome.monthlytotalIncome} totalExpense={TotalExpense.monthlytotalExpense} />\n                                </Grid>\n   \n                                </Grid>\n                            </Container>\n                            </Box>\n                            <PieChart username={CurrentUser} year={year} month={month} chartTitle={'Monthly Category Expenses'}/>\n                        {/* <PieChart username={CurrentUser} year={year} month={month} chartTitle={title}/>\n                        <LineChart username={CurrentUser} year={year} month={month} chartTitle={title}/>\n                        <Balance totalIncome={totalIncome} totalExpense={TotalExpense}/> */}\n                        <ExpenseCardList expenses={expenses.expenses}/>\n                        </div>\n                    :<p className=\"lead\">Sorry, no results were found!</p>\n                }\n                {/* <button onClick={addExpense}>Add New Expense</button>\n                <button onClick={searchMonthly}>Search By Month</button> */}\n            </div>\n            \n        </div>\n    )\n\n}\n\nexport default MonthlyExpenses;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/homepage/Homepage.js",["333"],[],"import * as React from 'react';\nimport {  Typography } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport HomepageLayout from './HomepageLayout';\nimport  {useContext} from 'react';\nimport UserContext from '../auth/UserContext';\n\nexport default function Homepage() {\n  const {currentUser, setCurrentUser} = useContext(UserContext);\n\n  return (\n    <div style={{  \n      backgroundImage: `url(https://source.unsplash.com/random)`,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      backgroundRepeat: 'no-repeat'\n    }}>\n    <HomepageLayout\n      sxBackground={{\n        // backgroundImage: `url(${backgroundImage})`,\n        // backgroundColor: '#7fc7d9', // Average color of the background image.\n        // backgroundPosition: 'center',\n      }}\n    >\n      {/* Increase the network loading priority of the background image. */}\n      {/* <img\n        style={{ display: 'none' }}\n        src={backgroundImage}\n        alt=\"increase priority\"\n      /> */}\n      <Typography color=\"inherit\" align=\"center\" variant=\"h2\" marked=\"center\">\n        Track Your Expenses!\n      </Typography>\n      {!currentUser && <Typography\n        color=\"inherit\"\n        align=\"center\"\n        variant=\"h5\"\n        sx={{ mb: 4, mt: { sx: 4, sm: 10 } }}\n      >\n        Create your account today and keep track of your spending activities.\n      </Typography>}\n      {!currentUser && <Button\n        color=\"secondary\"\n        variant=\"contained\"\n        size=\"large\"\n        component=\"a\"\n        href=\"/register\"\n        sx={{ minWidth: 200 }}\n      >\n        Register\n      </Button>}\n      {currentUser && <Button\n        color=\"secondary\"\n        variant=\"contained\"\n        size=\"large\"\n        component=\"a\"\n        href=\"/expenses\"\n        sx={{ minWidth: 200 }}\n      >\n        Go Track Your Expenses\n      </Button>}\n      <Typography variant=\"body2\" color=\"inherit\" sx={{ mt: 2 }}>\n        Discover the experience\n      </Typography>\n    </HomepageLayout>\n    </div>\n  );\n}","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/LoadingSpinner.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/DashBoard.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/Search.js",["334"],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Alert.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/ExpenseCardList.js",["335","336","337","338"],[],"import React,{useContext} from 'react';\nimport ExpenseCard from './ExpenseCard';\nimport {\n    Box,\n    Button,\n    Card,\n    CardHeader,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Tooltip\n  } from '@mui/material';\n  import UserContext from '../auth/UserContext';\n  import LedgerApi from '../Api/api';\n\n\nfunction ExpenseCardList({expenses}){\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n\n    console.debug(\"expenses\",\"expenses=\",expenses);\n\n    return (\n        <div>\n            {/* {expenses.map(expense =>(\n                <div>\n                <ExpenseCard \n                    key ={expense.id}\n                    id={expense.id}\n                    amount={expense.amount}\n                    category={expense.category}\n                    detail={expense.detail}\n                    date={expense.date}\n                /> */}\n\n                <Card >\n                    <CardHeader title=\"Expense History\" />\n                    <Button style={{float: 'right'}} href={`/expenses/add`}>Add New Expense</Button>\n                    {/* <PerfectScrollbar> */}\n                    <Box sx={{ minWidth: 800 }}>\n                        <Table>\n                        <TableHead>\n                            <TableRow>\n                            <TableCell>\n                                Category\n                            </TableCell>\n                            <TableCell>\n                                Amount($)\n                            </TableCell>\n                            <TableCell >\n                                Detail\n                            </TableCell>\n                            <TableCell>\n                                Date\n                            </TableCell>\n                            <TableCell>\n                                Edit\n                            </TableCell>\n                            <TableCell>\n                                Delete\n                            </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {expenses.map((expense) => (\n                            <TableRow\n                                hover\n                                key={expense.id}\n                            >\n                                <TableCell>\n                                {expense.category.toUpperCase()}\n                                </TableCell>\n                                <TableCell>\n                                {expense.amount}\n                                </TableCell>\n                                <TableCell>\n                                {expense.detail}\n                                </TableCell>\n                                <TableCell>\n                                {expense.date.substring(0,10)}\n                                </TableCell>\n                                <TableCell>\n                                <Button href={`/expenses/${currentUser.user.username}/${expense.id}`}>Edit</Button>\n                                </TableCell>\n                                <TableCell>\n                                <Button onClick={async function deleteExpense(evt){\n                                                evt.preventDefault();\n                                                await LedgerApi.deleteExpense(currentUser.user.username,expense.id);\n                                                window.location.reload();\n                                            }}>Delete</Button>\n                                </TableCell>\n                            </TableRow>\n                            ))}\n                        </TableBody>\n                        </Table>\n                    </Box>\n                </Card>\n                {/* </div>\n            ))} */}\n\n        </div>\n    )\n\n}\n\nexport default ExpenseCardList;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/PopDeleteUser.js",["339","340"],[],"import {useNavigate} from 'react-router';\nimport UserContext from '../auth/UserContext';\nimport {useContext} from 'react';\nimport LedgerApi from '../Api/api';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\n\n\nfunction PopupUser({ popup,setPopup }) {\n\n    const history = useNavigate();\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n\n\n    function backToProfile (evt){\n        evt.preventDefault();\n        setPopup({show: false});\n        history(`/profile`);\n    }\n\n    async function deleteUser (evt){\n        evt.preventDefault();\n        await LedgerApi.deleteUser(currentUser.user.username);\n        history(`/`);\n    }\n\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_box\">\n          <p>You sure you wanna delete?</p>\n          {/* <button onClick={backToProfile}>Cancel</button> */}\n          <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n              <Button fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }} onClick={backToProfile}>Cancel</Button>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n              <Button fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor:'red'}} onClick={deleteUser}>Confirm</Button>\n            </Grid>\n            </Grid>\n          {/* <button onClick={deleteUser}>\n            Confirm\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n  \n  export default PopupUser;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/EarningCard.js",["341","342","343","344","345","346","347","348","349","350","351","352"],[],"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from '@mui/material';\n\n// project imports\nimport MainCard from './ui-component/MainCard';\nimport SkeletonEarningCard from './ui-component/SkeletonEarningCard';\n\n// assets\n// import EarningIcon from 'assets/images/icons/earning.svg';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport GetAppTwoToneIcon from '@mui/icons-material/GetAppOutlined';\nimport FileCopyTwoToneIcon from '@mui/icons-material/FileCopyOutlined';\nimport PictureAsPdfTwoToneIcon from '@mui/icons-material/PictureAsPdfOutlined';\nimport ArchiveTwoToneIcon from '@mui/icons-material/ArchiveOutlined';\n\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    backgroundColor: theme.palette.secondary.dark,\n    color: '#fff',\n    overflow: 'hidden',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: theme.palette.secondary[800],\n        borderRadius: '50%',\n        top: -85,\n        right: -95,\n        [theme.breakpoints.down('sm')]: {\n            top: -105,\n            right: -140\n        }\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: theme.palette.secondary[800],\n        borderRadius: '50%',\n        top: -125,\n        right: -15,\n        opacity: 0.5,\n        [theme.breakpoints.down('sm')]: {\n            top: -155,\n            right: -70\n        }\n    }\n}));\n\n// ===========================|| DASHBOARD DEFAULT - EARNING CARD ||=========================== //\n\nconst EarningCard = ({isLoading, cardName, amount}) => {\n    const theme = useTheme();\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <SkeletonEarningCard />\n            ) : (\n                <CardWrapper border={false} content={false} >\n                    <Box sx={{ p: 2.25 }}>\n                        <Grid container direction=\"column\">\n                            <Grid item>\n                                <Grid container alignItems=\"center\">\n                                    <Grid item>\n                                        <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\n                                            {amount}\n                                        </Typography>\n                                    </Grid>\n                                    {/* <Grid item>\n                                        <Avatar\n                                            sx={{\n                                                cursor: 'pointer',\n                                                ...theme.typography.smallAvatar,\n                                                backgroundColor: theme.palette.secondary[200],\n                                                color: theme.palette.secondary.dark\n                                            }}\n                                        >\n                                            <ArrowUpwardIcon fontSize=\"inherit\" sx={{ transform: 'rotate3d(1, 1, 1, 45deg)' }} />\n                                        </Avatar>\n                                    </Grid> */}\n                                </Grid>\n                            </Grid>\n                            <Grid item sx={{ mb: 1.25 }}>\n                                <Typography\n                                    sx={{\n                                        fontSize: '1rem',\n                                        fontWeight: 500,\n                                        color: theme.palette.secondary[200]\n                                    }}\n                                >\n                                    {cardName}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    );\n};\n\nEarningCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default EarningCard;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Balance.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/Piechart.js",["353","354","355","356","357","358","359"],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/MonthlyTotalPie.js",["360","361","362","363","364","365","366","367","368","369","370","371"],[],"import React, { Component,useEffect,useState } from 'react'\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Pie } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from '@mui/material';\n\n\n\nfunction TotalPieChart({totalIncome, totalExpense}) {\n\n    let data = {\n        labels: [\"Income\", \"Expense\"],\n        datasets: [{\n            data: [totalIncome, totalExpense],\n            backgroundColor: [\n              'rgb(54, 162, 235)',\n              'rgb(255, 99, 132)',\n            ],\n            hoverOffset: 4\n          }]\n      }\n\n    let incomePercent = (totalIncome/(totalIncome+totalExpense)*100).toFixed(2)+\"%\";\n    let expensePercent = (totalExpense/(totalIncome+totalExpense)*100).toFixed(2)+\"%\";\n\n    return (\n      <div className=\"container mt-5\">\n            <Pie \n                    data={data}\n            />\n            Income Percentage : {incomePercent}\n            Expense Percentage : {expensePercent}\n\n      </div>\n    )\n}\n\nexport default TotalPieChart;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/homepage/HomepageLayout.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/DashboardLayout.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/expenses/ExpenseCard.js",["372"],[],"import React from 'react';\nimport LedgerApi from '../Api/api';\nimport {useNavigate} from 'react-router';\nimport UserContext from '../auth/UserContext';\nimport {useContext} from 'react';\n\nfunction ExpenseCard({id,amount, category,detail,date}){\n\n    const history = useNavigate();\n    const {currentUser, setCurrentUser} = useContext(UserContext);\n    \n\n    async function deleteExpense(evt){\n        evt.preventDefault();\n        await LedgerApi.deleteExpense(currentUser.user.username,id);\n        window.location.reload();\n    }\n\n    async function editExpense(evt){\n        evt.preventDefault();\n        history(`/expenses/${currentUser.user.username}/${id}`);\n    }\n\n    const Category = category.toUpperCase();\n    return (\n        <div>\n        <div><button onClick={deleteExpense}>X</button></div>\n        <div>\n            <h6>{Category}</h6>\n            <p>Amount: ${amount}</p>\n            <p>Detail: {detail}</p>\n            <p>Date: {date}</p>\n        </div>\n        <div><button onClick={editExpense}>Edit</button></div>\n        </div>\n    )\n\n}\n\nexport default ExpenseCard;","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/DashboardSidebar.js",["373","374","375"],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/ui-component/SkeletonEarningCard.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/ui-component/MainCard.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/selector.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/shopping-bag.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/user-add.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/x-circle.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/lock.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/chart-bar.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/users.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/cog.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/MUI/DashBoard/icons/user.js",[],[],"/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/MonthlyCategory.js",["376"],[],"import React, { useEffect,useState } from 'react'\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Bar } from 'react-chartjs-2';\nimport { Grid } from '@mui/material';\n\n\n\n\nfunction LineChart({username,year,month,chartTitle}) {\n\n  const [income,setIncome] = useState(null);\n  const [expense,setExpense] = useState(null);\n  // const [ totalIncome,setTotalIncome] = useState(null);\n\n  async function getdailyData(username,year,month){\n    setIncome(await LedgerApi.getIncomesByDay(username,year,month));\n    setExpense( await LedgerApi.getExpensesByDay(username,year,month));\n    // setTotalIncome ( await LedgerApi.getMonthlyTotalIncome(username,year,month))\n  }\n\n    useEffect(function getDailyData(){\n      getdailyData(username,year,month);\n      console.log(expense,income);\n    },[])\n\n    if(!income) return <LoadingSpinner />;\n    if(!expense) return <LoadingSpinner />;\n    // if(!totalIncome) return <LoadingSpinner />;\n\n    let data = {\n      labels: expense.dailyExpense.map(x=>x[0]),\n      datasets: [\n        {\n          id: 1,\n          label: 'Expnese',\n          data: expense.dailyExpense.map(x=>x[1]),\n          borderColor: \"red\",\n          backgroundColor: \"red\",\n        },\n        {\n          id: 2,\n          label: 'Income',\n          data: income.dailyIncome.map(x=>x[1]),\n          borderColor:\"blue\",\n          backgroundColor:\"blue\",\n        },\n      ],\n    }\n\n    return (\n      <div className=\"container mt-5\">\n      <Grid item xs={9}>\n        <h2>{chartTitle}</h2>\n        <Bar\n          datasetIdKey='id'\n          data={data}\n        />\n      </Grid>\n      </div>\n      \n    )\n}\n\nexport default LineChart;\n","/Users/ziyizhang/Desktop/springboard/heroku/personal_ledger/frontend/src/common/Monthly.js",["377"],[],"import React, { useEffect,useState } from 'react'\nimport LedgerApi from '../Api/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Bar} from 'react-chartjs-2';\n\n\n\nfunction PieChart({username,year,month,chartTitle}) {\n\n  const [categoryIncome,setCategoryIncome] = useState(null);\n  const [categoryExpense,setCategoryExpense] = useState(null);\n\n  async function getCategoryData(username,year,month){\n    setCategoryIncome(await LedgerApi.getMonthlyCategoryIncome(username,year,month));\n    setCategoryExpense( await LedgerApi.getMonthlyCategoryExpense(username,year,month));\n  }\n\n    useEffect(function getcategoryData(){\n      getCategoryData(username,year,month);\n      console.log(categoryExpense,categoryIncome);\n    },[])\n\n    if(!categoryExpense) return <LoadingSpinner />;\n    if(!categoryIncome) return <LoadingSpinner />;\n\n    let expensedata = {\n      labels: categoryExpense.categoryExpense.map(x=>x[0]),\n      datasets: [\n        {\n          id: 1,\n          label: 'Expnese',\n          data: categoryExpense.categoryExpense.map(x=>x[1]),\n          borderColor: '',\n          backgroundColor: 'orange',\n        },\n        {\n            id: 2,\n            label: 'Income',\n            data: categoryIncome.categoryIncome.map(x=>x[1]),\n            borderColor: \"\",\n            backgroundColor:'#8a2be2',\n            //  [\"#0000ff\", \"#0000e5\",\n            //     \"#0000cc\",\n            //     \"#0000b2\",\n            //     \"#000099\",\n            //     \"#00007f\",\n            //     \"#000066\",\n            //     \"#00004c\",\n            //     \"#000033\",\n            //     \"#000019\",\n            //     \"#1919ff\",\n            //     \"#3232ff\",\n            //     \"#4c4cff\",\n            //     \"#6666ff\",\n            //     \"#7f7fff\",\n            //     \"#9999ff\",\n            //     \"#b2b2ff\",\n            //     \"#ccccff\",\n            //     \"#e5e5ff\",\n            //     ],\n          },\n      ],\n    }\n\n\n    return (\n      <div className=\"container mt-5\">\n      {/* <Grid container rowSpacing={1}>\n      <Grid item xs={6}>\n        <h2 >{expenseTitle}</h2>\n        <div style={{height:\"500px\", width:\"500px\"}}>\n        <Bar\n            style={{\n                canvasHeight:\"500px\",\n                canvasWidth:\"500px\",\n            }}\n          datasetIdKey='id'\n          data={expensedata} \n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'left',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}/>\n        </div></Grid>\n        <Grid item xs={6}>\n        <h2>{incomeTitle}</h2>\n        <div style={{height:\"500px\", width:\"500px\"}}>\n        <Bar\n          datasetIdKey='id'\n          data={incomedata }\n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'right',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}\n        /></div></Grid></Grid> */}\n        {chartTitle}\n        <Bar\n            style={{\n                canvasHeight:\"500px\",\n                canvasWidth:\"500px\",\n            }}\n          datasetIdKey='id'\n          data={expensedata} \n          options={ {\n            plugins: {\n            //     responsive: true,\n            //     legend: {\n            //         color: 'black',                \n            //         position: 'left',\n            //         labels: {\n            //                 generateLabels: (chart) => {\n            //                     const datasets = chart.data.datasets;\n            //                     return datasets[0].data.map((data, i) => ({\n            //                     text: `${chart.data.labels[i]} ${data}`,\n            //                     fillStyle: datasets[0].backgroundColor[i],\n            //                     }))\n            //         },\n            //     } ,\n            // }\n        }}}/>\n                {/* <Bar\n          datasetIdKey='id'\n          data={incomedata }\n          options={ {\n            plugins: {\n                responsive: true,\n                legend: {\n                    color: 'black',                \n                    position: 'right',\n                    labels: {\n                            generateLabels: (chart) => {\n                                const datasets = chart.data.datasets;\n                                return datasets[0].data.map((data, i) => ({\n                                text: `${chart.data.labels[i]} ${data}`,\n                                fillStyle: datasets[0].backgroundColor[i],\n                                }))\n                    },\n                } ,\n            }\n        }}}\n        /> */}\n      </div>\n    )\n}\n\nexport default PieChart;",{"ruleId":"378","severity":1,"message":"379","line":3,"column":8,"nodeType":"380","messageId":"381","endLine":3,"endColumn":13},{"ruleId":"378","severity":1,"message":"382","line":9,"column":8,"nodeType":"380","messageId":"381","endLine":9,"endColumn":24},{"ruleId":"378","severity":1,"message":"383","line":10,"column":8,"nodeType":"380","messageId":"381","endLine":10,"endColumn":16},{"ruleId":"378","severity":1,"message":"384","line":18,"column":8,"nodeType":"380","messageId":"381","endLine":18,"endColumn":13},{"ruleId":"378","severity":1,"message":"385","line":48,"column":13,"nodeType":"380","messageId":"381","endLine":48,"endColumn":19},{"ruleId":"378","severity":1,"message":"382","line":8,"column":8,"nodeType":"380","messageId":"381","endLine":8,"endColumn":24},{"ruleId":"378","severity":1,"message":"383","line":9,"column":8,"nodeType":"380","messageId":"381","endLine":9,"endColumn":16},{"ruleId":"378","severity":1,"message":"384","line":16,"column":8,"nodeType":"380","messageId":"381","endLine":16,"endColumn":13},{"ruleId":"378","severity":1,"message":"386","line":6,"column":8,"nodeType":"380","messageId":"381","endLine":6,"endColumn":14},{"ruleId":"378","severity":1,"message":"382","line":10,"column":8,"nodeType":"380","messageId":"381","endLine":10,"endColumn":24},{"ruleId":"378","severity":1,"message":"383","line":11,"column":8,"nodeType":"380","messageId":"381","endLine":11,"endColumn":16},{"ruleId":"378","severity":1,"message":"387","line":12,"column":8,"nodeType":"380","messageId":"381","endLine":12,"endColumn":12},{"ruleId":"378","severity":1,"message":"388","line":15,"column":8,"nodeType":"380","messageId":"381","endLine":15,"endColumn":24},{"ruleId":"378","severity":1,"message":"389","line":21,"column":10,"nodeType":"380","messageId":"381","endLine":21,"endColumn":24},{"ruleId":"378","severity":1,"message":"390","line":22,"column":9,"nodeType":"380","messageId":"381","endLine":22,"endColumn":19},{"ruleId":"378","severity":1,"message":"391","line":22,"column":20,"nodeType":"380","messageId":"381","endLine":22,"endColumn":31},{"ruleId":"378","severity":1,"message":"392","line":22,"column":32,"nodeType":"380","messageId":"381","endLine":22,"endColumn":42},{"ruleId":"378","severity":1,"message":"393","line":22,"column":43,"nodeType":"380","messageId":"381","endLine":22,"endColumn":57},{"ruleId":"378","severity":1,"message":"394","line":22,"column":58,"nodeType":"380","messageId":"381","endLine":22,"endColumn":78},{"ruleId":"378","severity":1,"message":"395","line":28,"column":26,"nodeType":"380","messageId":"381","endLine":28,"endColumn":40},{"ruleId":"378","severity":1,"message":"396","line":41,"column":27,"nodeType":"380","messageId":"381","endLine":41,"endColumn":43},{"ruleId":"378","severity":1,"message":"397","line":87,"column":9,"nodeType":"380","messageId":"381","endLine":87,"endColumn":19},{"ruleId":"398","severity":1,"message":"399","line":232,"column":19,"nodeType":"400","messageId":"401","endLine":232,"endColumn":35},{"ruleId":"378","severity":1,"message":"402","line":1,"column":25,"nodeType":"380","messageId":"381","endLine":1,"endColumn":34},{"ruleId":"378","severity":1,"message":"403","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":17},{"ruleId":"378","severity":1,"message":"404","line":3,"column":8,"nodeType":"380","messageId":"381","endLine":3,"endColumn":22},{"ruleId":"378","severity":1,"message":"405","line":10,"column":8,"nodeType":"380","messageId":"381","endLine":10,"endColumn":17},{"ruleId":"378","severity":1,"message":"382","line":11,"column":8,"nodeType":"380","messageId":"381","endLine":11,"endColumn":24},{"ruleId":"378","severity":1,"message":"383","line":12,"column":8,"nodeType":"380","messageId":"381","endLine":12,"endColumn":16},{"ruleId":"378","severity":1,"message":"387","line":13,"column":8,"nodeType":"380","messageId":"381","endLine":13,"endColumn":12},{"ruleId":"378","severity":1,"message":"388","line":16,"column":8,"nodeType":"380","messageId":"381","endLine":16,"endColumn":24},{"ruleId":"378","severity":1,"message":"395","line":22,"column":25,"nodeType":"380","messageId":"381","endLine":22,"endColumn":39},{"ruleId":"378","severity":1,"message":"406","line":7,"column":8,"nodeType":"380","messageId":"381","endLine":7,"endColumn":19},{"ruleId":"378","severity":1,"message":"395","line":14,"column":25,"nodeType":"380","messageId":"381","endLine":14,"endColumn":39},{"ruleId":"407","severity":1,"message":"408","line":24,"column":7,"nodeType":"409","endLine":24,"endColumn":9,"suggestions":"410"},{"ruleId":"411","severity":1,"message":"412","line":26,"column":19,"nodeType":"413","messageId":"414","endLine":26,"endColumn":27,"fix":"415"},{"ruleId":"378","severity":1,"message":"416","line":28,"column":9,"nodeType":"380","messageId":"381","endLine":28,"endColumn":14},{"ruleId":"378","severity":1,"message":"417","line":37,"column":14,"nodeType":"380","messageId":"381","endLine":37,"endColumn":24},{"ruleId":"378","severity":1,"message":"418","line":42,"column":14,"nodeType":"380","messageId":"381","endLine":42,"endColumn":26},{"ruleId":"378","severity":1,"message":"419","line":47,"column":14,"nodeType":"380","messageId":"381","endLine":47,"endColumn":25},{"ruleId":"378","severity":1,"message":"395","line":13,"column":25,"nodeType":"380","messageId":"381","endLine":13,"endColumn":39},{"ruleId":"407","severity":1,"message":"420","line":23,"column":7,"nodeType":"409","endLine":23,"endColumn":9,"suggestions":"421"},{"ruleId":"411","severity":1,"message":"412","line":25,"column":19,"nodeType":"413","messageId":"414","endLine":25,"endColumn":27,"fix":"422"},{"ruleId":"378","severity":1,"message":"379","line":4,"column":8,"nodeType":"380","messageId":"381","endLine":4,"endColumn":13},{"ruleId":"378","severity":1,"message":"386","line":6,"column":8,"nodeType":"380","messageId":"381","endLine":6,"endColumn":14},{"ruleId":"378","severity":1,"message":"382","line":10,"column":8,"nodeType":"380","messageId":"381","endLine":10,"endColumn":24},{"ruleId":"378","severity":1,"message":"383","line":11,"column":8,"nodeType":"380","messageId":"381","endLine":11,"endColumn":16},{"ruleId":"378","severity":1,"message":"387","line":12,"column":8,"nodeType":"380","messageId":"381","endLine":12,"endColumn":12},{"ruleId":"378","severity":1,"message":"388","line":15,"column":8,"nodeType":"380","messageId":"381","endLine":15,"endColumn":24},{"ruleId":"378","severity":1,"message":"423","line":5,"column":8,"nodeType":"380","messageId":"381","endLine":5,"endColumn":23},{"ruleId":"378","severity":1,"message":"390","line":8,"column":9,"nodeType":"380","messageId":"381","endLine":8,"endColumn":19},{"ruleId":"378","severity":1,"message":"392","line":8,"column":32,"nodeType":"380","messageId":"381","endLine":8,"endColumn":42},{"ruleId":"378","severity":1,"message":"424","line":9,"column":28,"nodeType":"380","messageId":"381","endLine":9,"endColumn":37},{"ruleId":"378","severity":1,"message":"395","line":21,"column":25,"nodeType":"380","messageId":"381","endLine":21,"endColumn":39},{"ruleId":"378","severity":1,"message":"425","line":22,"column":12,"nodeType":"380","messageId":"381","endLine":22,"endColumn":20},{"ruleId":"378","severity":1,"message":"426","line":25,"column":12,"nodeType":"380","messageId":"381","endLine":25,"endColumn":22},{"ruleId":"407","severity":1,"message":"420","line":35,"column":7,"nodeType":"409","endLine":35,"endColumn":9,"suggestions":"427"},{"ruleId":"411","severity":1,"message":"412","line":37,"column":19,"nodeType":"413","messageId":"414","endLine":37,"endColumn":27,"fix":"428"},{"ruleId":"378","severity":1,"message":"417","line":49,"column":14,"nodeType":"380","messageId":"381","endLine":49,"endColumn":24},{"ruleId":"378","severity":1,"message":"429","line":55,"column":14,"nodeType":"380","messageId":"381","endLine":55,"endColumn":26},{"ruleId":"378","severity":1,"message":"386","line":7,"column":8,"nodeType":"380","messageId":"381","endLine":7,"endColumn":14},{"ruleId":"378","severity":1,"message":"382","line":11,"column":8,"nodeType":"380","messageId":"381","endLine":11,"endColumn":24},{"ruleId":"378","severity":1,"message":"383","line":12,"column":8,"nodeType":"380","messageId":"381","endLine":12,"endColumn":16},{"ruleId":"378","severity":1,"message":"387","line":13,"column":8,"nodeType":"380","messageId":"381","endLine":13,"endColumn":12},{"ruleId":"378","severity":1,"message":"388","line":16,"column":8,"nodeType":"380","messageId":"381","endLine":16,"endColumn":24},{"ruleId":"378","severity":1,"message":"389","line":23,"column":10,"nodeType":"380","messageId":"381","endLine":23,"endColumn":24},{"ruleId":"378","severity":1,"message":"390","line":24,"column":9,"nodeType":"380","messageId":"381","endLine":24,"endColumn":19},{"ruleId":"378","severity":1,"message":"391","line":24,"column":20,"nodeType":"380","messageId":"381","endLine":24,"endColumn":31},{"ruleId":"378","severity":1,"message":"392","line":24,"column":32,"nodeType":"380","messageId":"381","endLine":24,"endColumn":42},{"ruleId":"378","severity":1,"message":"393","line":24,"column":43,"nodeType":"380","messageId":"381","endLine":24,"endColumn":57},{"ruleId":"378","severity":1,"message":"394","line":24,"column":58,"nodeType":"380","messageId":"381","endLine":24,"endColumn":78},{"ruleId":"378","severity":1,"message":"395","line":30,"column":26,"nodeType":"380","messageId":"381","endLine":30,"endColumn":40},{"ruleId":"407","severity":1,"message":"430","line":44,"column":7,"nodeType":"409","endLine":44,"endColumn":9,"suggestions":"431"},{"ruleId":"378","severity":1,"message":"432","line":57,"column":12,"nodeType":"380","messageId":"381","endLine":57,"endColumn":25},{"ruleId":"378","severity":1,"message":"396","line":57,"column":27,"nodeType":"380","messageId":"381","endLine":57,"endColumn":43},{"ruleId":"378","severity":1,"message":"397","line":77,"column":9,"nodeType":"380","messageId":"381","endLine":77,"endColumn":19},{"ruleId":"398","severity":1,"message":"399","line":233,"column":21,"nodeType":"400","messageId":"401","endLine":233,"endColumn":37},{"ruleId":"378","severity":1,"message":"395","line":14,"column":25,"nodeType":"380","messageId":"381","endLine":14,"endColumn":39},{"ruleId":"407","severity":1,"message":"433","line":31,"column":7,"nodeType":"409","endLine":31,"endColumn":9,"suggestions":"434"},{"ruleId":"378","severity":1,"message":"395","line":16,"column":25,"nodeType":"380","messageId":"381","endLine":16,"endColumn":39},{"ruleId":"407","severity":1,"message":"435","line":36,"column":7,"nodeType":"409","endLine":36,"endColumn":9,"suggestions":"436"},{"ruleId":"378","severity":1,"message":"395","line":9,"column":23,"nodeType":"380","messageId":"381","endLine":9,"endColumn":37},{"ruleId":"378","severity":1,"message":"390","line":8,"column":9,"nodeType":"380","messageId":"381","endLine":8,"endColumn":19},{"ruleId":"378","severity":1,"message":"437","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":19},{"ruleId":"378","severity":1,"message":"438","line":13,"column":5,"nodeType":"380","messageId":"381","endLine":13,"endColumn":19},{"ruleId":"378","severity":1,"message":"439","line":14,"column":5,"nodeType":"380","messageId":"381","endLine":14,"endColumn":12},{"ruleId":"378","severity":1,"message":"395","line":21,"column":25,"nodeType":"380","messageId":"381","endLine":21,"endColumn":39},{"ruleId":"378","severity":1,"message":"440","line":7,"column":8,"nodeType":"380","messageId":"381","endLine":7,"endColumn":11},{"ruleId":"378","severity":1,"message":"395","line":13,"column":25,"nodeType":"380","messageId":"381","endLine":13,"endColumn":39},{"ruleId":"378","severity":1,"message":"386","line":6,"column":10,"nodeType":"380","messageId":"381","endLine":6,"endColumn":16},{"ruleId":"378","severity":1,"message":"441","line":6,"column":29,"nodeType":"380","messageId":"381","endLine":6,"endColumn":33},{"ruleId":"378","severity":1,"message":"442","line":6,"column":35,"nodeType":"380","messageId":"381","endLine":6,"endColumn":43},{"ruleId":"378","severity":1,"message":"443","line":14,"column":8,"nodeType":"380","messageId":"381","endLine":14,"endColumn":21},{"ruleId":"378","severity":1,"message":"444","line":15,"column":8,"nodeType":"380","messageId":"381","endLine":15,"endColumn":23},{"ruleId":"378","severity":1,"message":"445","line":16,"column":8,"nodeType":"380","messageId":"381","endLine":16,"endColumn":25},{"ruleId":"378","severity":1,"message":"446","line":17,"column":8,"nodeType":"380","messageId":"381","endLine":17,"endColumn":27},{"ruleId":"378","severity":1,"message":"447","line":18,"column":8,"nodeType":"380","messageId":"381","endLine":18,"endColumn":31},{"ruleId":"378","severity":1,"message":"448","line":19,"column":8,"nodeType":"380","messageId":"381","endLine":19,"endColumn":26},{"ruleId":"378","severity":1,"message":"449","line":62,"column":12,"nodeType":"380","messageId":"381","endLine":62,"endColumn":20},{"ruleId":"378","severity":1,"message":"450","line":64,"column":11,"nodeType":"380","messageId":"381","endLine":64,"endColumn":22},{"ruleId":"378","severity":1,"message":"451","line":68,"column":11,"nodeType":"380","messageId":"381","endLine":68,"endColumn":22},{"ruleId":"378","severity":1,"message":"452","line":2,"column":10,"nodeType":"380","messageId":"381","endLine":2,"endColumn":18},{"ruleId":"378","severity":1,"message":"453","line":9,"column":16,"nodeType":"380","messageId":"381","endLine":9,"endColumn":24},{"ruleId":"378","severity":1,"message":"402","line":9,"column":25,"nodeType":"380","messageId":"381","endLine":9,"endColumn":34},{"ruleId":"378","severity":1,"message":"454","line":15,"column":9,"nodeType":"380","messageId":"381","endLine":15,"endColumn":13},{"ruleId":"378","severity":1,"message":"455","line":28,"column":9,"nodeType":"380","messageId":"381","endLine":28,"endColumn":16},{"ruleId":"411","severity":1,"message":"412","line":70,"column":17,"nodeType":"413","messageId":"414","endLine":70,"endColumn":25,"fix":"456"},{"ruleId":"378","severity":1,"message":"395","line":74,"column":23,"nodeType":"380","messageId":"381","endLine":74,"endColumn":37},{"ruleId":"378","severity":1,"message":"457","line":1,"column":17,"nodeType":"380","messageId":"381","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"402","line":1,"column":27,"nodeType":"380","messageId":"381","endLine":1,"endColumn":36},{"ruleId":"378","severity":1,"message":"453","line":1,"column":37,"nodeType":"380","messageId":"381","endLine":1,"endColumn":45},{"ruleId":"378","severity":1,"message":"403","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":17},{"ruleId":"378","severity":1,"message":"404","line":3,"column":8,"nodeType":"380","messageId":"381","endLine":3,"endColumn":22},{"ruleId":"378","severity":1,"message":"458","line":5,"column":8,"nodeType":"380","messageId":"381","endLine":5,"endColumn":13},{"ruleId":"378","severity":1,"message":"386","line":6,"column":10,"nodeType":"380","messageId":"381","endLine":6,"endColumn":16},{"ruleId":"378","severity":1,"message":"440","line":6,"column":18,"nodeType":"380","messageId":"381","endLine":6,"endColumn":21},{"ruleId":"378","severity":1,"message":"459","line":6,"column":23,"nodeType":"380","messageId":"381","endLine":6,"endColumn":27},{"ruleId":"378","severity":1,"message":"441","line":6,"column":29,"nodeType":"380","messageId":"381","endLine":6,"endColumn":33},{"ruleId":"378","severity":1,"message":"442","line":6,"column":35,"nodeType":"380","messageId":"381","endLine":6,"endColumn":43},{"ruleId":"378","severity":1,"message":"460","line":6,"column":45,"nodeType":"380","messageId":"381","endLine":6,"endColumn":55},{"ruleId":"378","severity":1,"message":"395","line":10,"column":25,"nodeType":"380","messageId":"381","endLine":10,"endColumn":39},{"ruleId":"378","severity":1,"message":"402","line":1,"column":10,"nodeType":"380","messageId":"381","endLine":1,"endColumn":19},{"ruleId":"378","severity":1,"message":"461","line":19,"column":7,"nodeType":"380","messageId":"381","endLine":19,"endColumn":12},{"ruleId":"462","severity":1,"message":"463","line":99,"column":15,"nodeType":"464","endLine":99,"endColumn":18},{"ruleId":"407","severity":1,"message":"465","line":25,"column":7,"nodeType":"409","endLine":25,"endColumn":9,"suggestions":"466"},{"ruleId":"407","severity":1,"message":"467","line":21,"column":7,"nodeType":"409","endLine":21,"endColumn":9,"suggestions":"468"},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'image' is defined but never used.","'result' is assigned a value but never used.","'Avatar' is defined but never used.","'Link' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'AdapterDateFns' is defined but never used.","'DatePicker' is defined but never used.","'MonthPicker' is defined but never used.","'YearPicker' is defined but never used.","'CalendarPicker' is defined but never used.","'LocalizationProvider' is defined but never used.","'setCurrentUser' is assigned a value but never used.","'setSaveConfirmed' is assigned a value but never used.","'newExpense' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useEffect' is defined but never used.","'LedgerApi' is defined but never used.","'LoadingSpinner' is defined but never used.","'TextField' is defined but never used.","'EarningCard' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'CurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["469"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"470","text":"471"},"'month' is assigned a value but never used.","'addExpense' is defined but never used.","'currentMonth' is defined but never used.","'currentYear' is defined but never used.","React Hook useEffect has missing dependencies: 'CurrentUser' and 'getUserExpenses'. Either include them or remove the dependency array.",["472"],{"range":"473","text":"471"},"'ExpenseCardList' is defined but never used.","'Container' is defined but never used.","'formData' is assigned a value but never used.","'formErrors' is assigned a value but never used.",["474"],{"range":"475","text":"471"},"'handleChange' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'username'. Either include them or remove the dependency array.",["476"],"'saveConfirmed' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CurrentUser', 'TotalExpense', 'getMonthlyTotalExpense', 'getMonthlyTotalIncome', 'getUserExpenses', 'getUserMonthlySaving', 'getUserMonthlySpending', 'saving', 'spending', and 'totalIncome'. Either include them or remove the dependency array.",["477"],"React Hook useEffect has missing dependencies: 'CurrentUser', 'getMonthlyTotalExpense', 'getMonthlyTotalIncome', 'getUserExpenses', 'getUserMonthlySaving', 'getUserMonthlySpending', 'saving', and 'spending'. Either include them or remove the dependency array.",["478"],"'ExpenseCard' is defined but never used.","'TableSortLabel' is defined but never used.","'Tooltip' is defined but never used.","'Box' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'MoreHorizIcon' is defined but never used.","'ArrowUpwardIcon' is defined but never used.","'GetAppTwoToneIcon' is defined but never used.","'FileCopyTwoToneIcon' is defined but never used.","'PictureAsPdfTwoToneIcon' is defined but never used.","'ArchiveTwoToneIcon' is defined but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'Doughnut' is defined but never used.","'useState' is defined but never used.","'data' is assigned a value but never used.","'options' is assigned a value but never used.",{"range":"479","text":"471"},"'Component' is defined but never used.","'Chart' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'items' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'expense', 'income', 'month', 'username', and 'year'. Either include them or remove the dependency array.",["480"],"React Hook useEffect has missing dependencies: 'categoryExpense', 'categoryIncome', 'month', 'username', and 'year'. Either include them or remove the dependency array.",["481"],{"desc":"482","fix":"483"},[705,705],"()",{"desc":"484","fix":"485"},[650,650],{"desc":"484","fix":"486"},[1152,1152],{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},[1714,1714],{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},"Update the dependencies array to be: [CurrentUser]",{"range":"497","text":"498"},"Update the dependencies array to be: [CurrentUser, getUserExpenses]",{"range":"499","text":"500"},{"range":"501","text":"500"},"Update the dependencies array to be: [id, username]",{"range":"502","text":"503"},"Update the dependencies array to be: [CurrentUser, TotalExpense, getMonthlyTotalExpense, getMonthlyTotalIncome, getUserExpenses, getUserMonthlySaving, getUserMonthlySpending, saving, spending, totalIncome]",{"range":"504","text":"505"},"Update the dependencies array to be: [CurrentUser, getMonthlyTotalExpense, getMonthlyTotalIncome, getUserExpenses, getUserMonthlySaving, getUserMonthlySpending, saving, spending]",{"range":"506","text":"507"},"Update the dependencies array to be: [expense, income, month, username, year]",{"range":"508","text":"509"},"Update the dependencies array to be: [categoryExpense, categoryIncome, month, username, year]",{"range":"510","text":"511"},[673,675],"[CurrentUser]",[618,620],"[CurrentUser, getUserExpenses]",[1120,1122],[1814,1816],"[id, username]",[1248,1250],"[CurrentUser, TotalExpense, getMonthlyTotalExpense, getMonthlyTotalIncome, getUserExpenses, getUserMonthlySaving, getUserMonthlySpending, saving, spending, totalIncome]",[1302,1304],"[CurrentUser, getMonthlyTotalExpense, getMonthlyTotalIncome, getUserExpenses, getUserMonthlySaving, getUserMonthlySpending, saving, spending]",[825,827],"[expense, income, month, username, year]",[732,734],"[categoryExpense, categoryIncome, month, username, year]"]